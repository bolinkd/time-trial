// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import boil "github.com/volatiletech/sqlboiler/boil"

import mock "github.com/stretchr/testify/mock"
import models "github.com/businessinstincts/traxone/models"

// OrganizationDBInterface is an autogenerated mock type for the OrganizationDBInterface type
type OrganizationDBInterface struct {
	mock.Mock
}

// AddOrg provides a mock function with given fields: org, tx
func (_m *OrganizationDBInterface) AddOrg(org *models.Organization, tx boil.Executor) error {
	ret := _m.Called(org, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Organization, boil.Executor) error); ok {
		r0 = rf(org, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOrgByID provides a mock function with given fields: orgID, tx
func (_m *OrganizationDBInterface) FindOrgByID(orgID int, tx boil.Executor) (*models.Organization, error) {
	ret := _m.Called(orgID, tx)

	var r0 *models.Organization
	if rf, ok := ret.Get(0).(func(int, boil.Executor) *models.Organization); ok {
		r0 = rf(orgID, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, boil.Executor) error); ok {
		r1 = rf(orgID, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrg provides a mock function with given fields: org, tx
func (_m *OrganizationDBInterface) UpdateOrg(org *models.Organization, tx boil.Executor) error {
	ret := _m.Called(org, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Organization, boil.Executor) error); ok {
		r0 = rf(org, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
