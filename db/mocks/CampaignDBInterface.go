// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import boil "github.com/volatiletech/sqlboiler/boil"

import mock "github.com/stretchr/testify/mock"
import models "github.com/businessinstincts/traxone/models"

// CampaignDBInterface is an autogenerated mock type for the CampaignDBInterface type
type CampaignDBInterface struct {
	mock.Mock
}

// AddCampaign provides a mock function with given fields: campaign, tx
func (_m *CampaignDBInterface) AddCampaign(campaign *models.Campaign, tx boil.Executor) error {
	ret := _m.Called(campaign, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Campaign, boil.Executor) error); ok {
		r0 = rf(campaign, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddOnspotInfo provides a mock function with given fields: info, tx
func (_m *CampaignDBInterface) AddOnspotInfo(info *models.OnspotInfo, tx boil.Executor) error {
	ret := _m.Called(info, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.OnspotInfo, boil.Executor) error); ok {
		r0 = rf(info, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllCampaigns provides a mock function with given fields: tx
func (_m *CampaignDBInterface) FindAllCampaigns(tx boil.Executor) (models.CampaignSlice, error) {
	ret := _m.Called(tx)

	var r0 models.CampaignSlice
	if rf, ok := ret.Get(0).(func(boil.Executor) models.CampaignSlice); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.CampaignSlice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(boil.Executor) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllCampaignsByOrgID provides a mock function with given fields: orgID, tx
func (_m *CampaignDBInterface) FindAllCampaignsByOrgID(orgID int, tx boil.Executor) (models.CampaignSlice, error) {
	ret := _m.Called(orgID, tx)

	var r0 models.CampaignSlice
	if rf, ok := ret.Get(0).(func(int, boil.Executor) models.CampaignSlice); ok {
		r0 = rf(orgID, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.CampaignSlice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, boil.Executor) error); ok {
		r1 = rf(orgID, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCampaignByID provides a mock function with given fields: campaignID, tx
func (_m *CampaignDBInterface) FindCampaignByID(campaignID int, tx boil.Executor) (*models.Campaign, error) {
	ret := _m.Called(campaignID, tx)

	var r0 *models.Campaign
	if rf, ok := ret.Get(0).(func(int, boil.Executor) *models.Campaign); ok {
		r0 = rf(campaignID, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Campaign)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, boil.Executor) error); ok {
		r1 = rf(campaignID, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCampaign provides a mock function with given fields: campaign, tx
func (_m *CampaignDBInterface) UpdateCampaign(campaign *models.Campaign, tx boil.Executor) error {
	ret := _m.Called(campaign, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Campaign, boil.Executor) error); ok {
		r0 = rf(campaign, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOnspotInfo provides a mock function with given fields: info, tx
func (_m *CampaignDBInterface) UpdateOnspotInfo(info *models.OnspotInfo, tx boil.Executor) error {
	ret := _m.Called(info, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.OnspotInfo, boil.Executor) error); ok {
		r0 = rf(info, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
