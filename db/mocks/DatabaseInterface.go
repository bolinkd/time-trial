// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import boil "github.com/volatiletech/sqlboiler/boil"

import mock "github.com/stretchr/testify/mock"
import models "github.com/businessinstincts/traxone/models"

// DatabaseInterface is an autogenerated mock type for the DatabaseInterface type
type DatabaseInterface struct {
	mock.Mock
}

// AddCampaign provides a mock function with given fields: campaign, tx
func (_m *DatabaseInterface) AddCampaign(campaign *models.Campaign, tx boil.Executor) error {
	ret := _m.Called(campaign, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Campaign, boil.Executor) error); ok {
		r0 = rf(campaign, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddOnspotInfo provides a mock function with given fields: info, tx
func (_m *DatabaseInterface) AddOnspotInfo(info *models.OnspotInfo, tx boil.Executor) error {
	ret := _m.Called(info, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.OnspotInfo, boil.Executor) error); ok {
		r0 = rf(info, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddOrg provides a mock function with given fields: org, tx
func (_m *DatabaseInterface) AddOrg(org *models.Organization, tx boil.Executor) error {
	ret := _m.Called(org, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Organization, boil.Executor) error); ok {
		r0 = rf(org, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUser provides a mock function with given fields: traxUser, tx
func (_m *DatabaseInterface) AddUser(traxUser *models.Traxuser, tx boil.Executor) error {
	ret := _m.Called(traxUser, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Traxuser, boil.Executor) error); ok {
		r0 = rf(traxUser, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllCampaigns provides a mock function with given fields: tx
func (_m *DatabaseInterface) FindAllCampaigns(tx boil.Executor) (models.CampaignSlice, error) {
	ret := _m.Called(tx)

	var r0 models.CampaignSlice
	if rf, ok := ret.Get(0).(func(boil.Executor) models.CampaignSlice); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.CampaignSlice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(boil.Executor) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllCampaignsByOrgID provides a mock function with given fields: orgID, tx
func (_m *DatabaseInterface) FindAllCampaignsByOrgID(orgID int, tx boil.Executor) (models.CampaignSlice, error) {
	ret := _m.Called(orgID, tx)

	var r0 models.CampaignSlice
	if rf, ok := ret.Get(0).(func(int, boil.Executor) models.CampaignSlice); ok {
		r0 = rf(orgID, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.CampaignSlice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, boil.Executor) error); ok {
		r1 = rf(orgID, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllUsersByOrgID provides a mock function with given fields: orgID, tx
func (_m *DatabaseInterface) FindAllUsersByOrgID(orgID int, tx boil.Executor) (models.TraxuserSlice, error) {
	ret := _m.Called(orgID, tx)

	var r0 models.TraxuserSlice
	if rf, ok := ret.Get(0).(func(int, boil.Executor) models.TraxuserSlice); ok {
		r0 = rf(orgID, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.TraxuserSlice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, boil.Executor) error); ok {
		r1 = rf(orgID, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCampaignByID provides a mock function with given fields: campaignID, tx
func (_m *DatabaseInterface) FindCampaignByID(campaignID int, tx boil.Executor) (*models.Campaign, error) {
	ret := _m.Called(campaignID, tx)

	var r0 *models.Campaign
	if rf, ok := ret.Get(0).(func(int, boil.Executor) *models.Campaign); ok {
		r0 = rf(campaignID, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Campaign)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, boil.Executor) error); ok {
		r1 = rf(campaignID, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrgByID provides a mock function with given fields: orgID, tx
func (_m *DatabaseInterface) FindOrgByID(orgID int, tx boil.Executor) (*models.Organization, error) {
	ret := _m.Called(orgID, tx)

	var r0 *models.Organization
	if rf, ok := ret.Get(0).(func(int, boil.Executor) *models.Organization); ok {
		r0 = rf(orgID, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, boil.Executor) error); ok {
		r1 = rf(orgID, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByID provides a mock function with given fields: userID, tx
func (_m *DatabaseInterface) FindUserByID(userID int, tx boil.Executor) (*models.Traxuser, error) {
	ret := _m.Called(userID, tx)

	var r0 *models.Traxuser
	if rf, ok := ret.Get(0).(func(int, boil.Executor) *models.Traxuser); ok {
		r0 = rf(userID, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Traxuser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, boil.Executor) error); ok {
		r1 = rf(userID, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactor provides a mock function with given fields:
func (_m *DatabaseInterface) GetTransactor() (boil.Transactor, error) {
	ret := _m.Called()

	var r0 boil.Transactor
	if rf, ok := ret.Get(0).(func() boil.Transactor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(boil.Transactor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCampaign provides a mock function with given fields: campaign, tx
func (_m *DatabaseInterface) UpdateCampaign(campaign *models.Campaign, tx boil.Executor) error {
	ret := _m.Called(campaign, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Campaign, boil.Executor) error); ok {
		r0 = rf(campaign, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOnspotInfo provides a mock function with given fields: info, tx
func (_m *DatabaseInterface) UpdateOnspotInfo(info *models.OnspotInfo, tx boil.Executor) error {
	ret := _m.Called(info, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.OnspotInfo, boil.Executor) error); ok {
		r0 = rf(info, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrg provides a mock function with given fields: org, tx
func (_m *DatabaseInterface) UpdateOrg(org *models.Organization, tx boil.Executor) error {
	ret := _m.Called(org, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Organization, boil.Executor) error); ok {
		r0 = rf(org, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: traxUser, tx
func (_m *DatabaseInterface) UpdateUser(traxUser *models.Traxuser, tx boil.Executor) error {
	ret := _m.Called(traxUser, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Traxuser, boil.Executor) error); ok {
		r0 = rf(traxUser, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
