// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Group is an object representing the database table.
type Group struct {
	ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ParentID       null.Int    `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`
	Name           null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	OrganizationID null.Int    `boil:"organization_id" json:"organization_id,omitempty" toml:"organization_id" yaml:"organization_id,omitempty"`
	CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	TMPClubID      null.Int    `boil:"tmp_club_id" json:"tmp_club_id,omitempty" toml:"tmp_club_id" yaml:"tmp_club_id,omitempty"`

	R *groupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L groupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GroupColumns = struct {
	ID             string
	ParentID       string
	Name           string
	OrganizationID string
	CreatedAt      string
	UpdatedAt      string
	TMPClubID      string
}{
	ID:             "id",
	ParentID:       "parent_id",
	Name:           "name",
	OrganizationID: "organization_id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	TMPClubID:      "tmp_club_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var GroupWhere = struct {
	ID             whereHelperint
	ParentID       whereHelpernull_Int
	Name           whereHelpernull_String
	OrganizationID whereHelpernull_Int
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	TMPClubID      whereHelpernull_Int
}{
	ID:             whereHelperint{field: `id`},
	ParentID:       whereHelpernull_Int{field: `parent_id`},
	Name:           whereHelpernull_String{field: `name`},
	OrganizationID: whereHelpernull_Int{field: `organization_id`},
	CreatedAt:      whereHelpertime_Time{field: `created_at`},
	UpdatedAt:      whereHelpertime_Time{field: `updated_at`},
	TMPClubID:      whereHelpernull_Int{field: `tmp_club_id`},
}

// GroupRels is where relationship names are stored.
var GroupRels = struct {
	Parent           string
	Organization     string
	ParentGroups     string
	GroupRowerGroups string
	GroupShells      string
}{
	Parent:           "Parent",
	Organization:     "Organization",
	ParentGroups:     "ParentGroups",
	GroupRowerGroups: "GroupRowerGroups",
	GroupShells:      "GroupShells",
}

// groupR is where relationships are stored.
type groupR struct {
	Parent           *Group
	Organization     *Organization
	ParentGroups     GroupSlice
	GroupRowerGroups RowerGroupSlice
	GroupShells      ShellSlice
}

// NewStruct creates a new relationship struct
func (*groupR) NewStruct() *groupR {
	return &groupR{}
}

// groupL is where Load methods for each relationship are stored.
type groupL struct{}

var (
	groupColumns               = []string{"id", "parent_id", "name", "organization_id", "created_at", "updated_at", "tmp_club_id"}
	groupColumnsWithoutDefault = []string{"parent_id", "name", "organization_id", "created_at", "updated_at", "tmp_club_id"}
	groupColumnsWithDefault    = []string{"id"}
	groupPrimaryKeyColumns     = []string{"id"}
)

type (
	// GroupSlice is an alias for a slice of pointers to Group.
	// This should generally be used opposed to []Group.
	GroupSlice []*Group
	// GroupHook is the signature for custom Group hook methods
	GroupHook func(boil.Executor, *Group) error

	groupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	groupType                 = reflect.TypeOf(&Group{})
	groupMapping              = queries.MakeStructMapping(groupType)
	groupPrimaryKeyMapping, _ = queries.BindMapping(groupType, groupMapping, groupPrimaryKeyColumns)
	groupInsertCacheMut       sync.RWMutex
	groupInsertCache          = make(map[string]insertCache)
	groupUpdateCacheMut       sync.RWMutex
	groupUpdateCache          = make(map[string]updateCache)
	groupUpsertCacheMut       sync.RWMutex
	groupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var groupBeforeInsertHooks []GroupHook
var groupBeforeUpdateHooks []GroupHook
var groupBeforeDeleteHooks []GroupHook
var groupBeforeUpsertHooks []GroupHook

var groupAfterInsertHooks []GroupHook
var groupAfterSelectHooks []GroupHook
var groupAfterUpdateHooks []GroupHook
var groupAfterDeleteHooks []GroupHook
var groupAfterUpsertHooks []GroupHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Group) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range groupBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Group) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range groupBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Group) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range groupBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Group) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range groupBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Group) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range groupAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Group) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range groupAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Group) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range groupAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Group) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range groupAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Group) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range groupAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGroupHook registers your hook function for all future operations.
func AddGroupHook(hookPoint boil.HookPoint, groupHook GroupHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		groupBeforeInsertHooks = append(groupBeforeInsertHooks, groupHook)
	case boil.BeforeUpdateHook:
		groupBeforeUpdateHooks = append(groupBeforeUpdateHooks, groupHook)
	case boil.BeforeDeleteHook:
		groupBeforeDeleteHooks = append(groupBeforeDeleteHooks, groupHook)
	case boil.BeforeUpsertHook:
		groupBeforeUpsertHooks = append(groupBeforeUpsertHooks, groupHook)
	case boil.AfterInsertHook:
		groupAfterInsertHooks = append(groupAfterInsertHooks, groupHook)
	case boil.AfterSelectHook:
		groupAfterSelectHooks = append(groupAfterSelectHooks, groupHook)
	case boil.AfterUpdateHook:
		groupAfterUpdateHooks = append(groupAfterUpdateHooks, groupHook)
	case boil.AfterDeleteHook:
		groupAfterDeleteHooks = append(groupAfterDeleteHooks, groupHook)
	case boil.AfterUpsertHook:
		groupAfterUpsertHooks = append(groupAfterUpsertHooks, groupHook)
	}
}

// OneG returns a single group record from the query using the global executor.
func (q groupQuery) OneG() (*Group, error) {
	return q.One(boil.GetDB())
}

// One returns a single group record from the query.
func (q groupQuery) One(exec boil.Executor) (*Group, error) {
	o := &Group{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Group")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Group records from the query using the global executor.
func (q groupQuery) AllG() (GroupSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Group records from the query.
func (q groupQuery) All(exec boil.Executor) (GroupSlice, error) {
	var o []*Group

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Group slice")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Group records in the query, and panics on error.
func (q groupQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Group records in the query.
func (q groupQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Group rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q groupQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q groupQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Group exists")
	}

	return count > 0, nil
}

// Parent pointed to by the foreign key.
func (o *Group) Parent(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ParentID),
	}

	queryMods = append(queryMods, mods...)

	query := Groups(queryMods...)
	queries.SetFrom(query.Query, "\"Group\"")

	return query
}

// Organization pointed to by the foreign key.
func (o *Group) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "\"organization\"")

	return query
}

// ParentGroups retrieves all the Group's Groups with an executor via parent_id column.
func (o *Group) ParentGroups(mods ...qm.QueryMod) groupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Group\".\"parent_id\"=?", o.ID),
	)

	query := Groups(queryMods...)
	queries.SetFrom(query.Query, "\"Group\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"Group\".*"})
	}

	return query
}

// GroupRowerGroups retrieves all the rower_group's RowerGroups with an executor via group_id column.
func (o *Group) GroupRowerGroups(mods ...qm.QueryMod) rowerGroupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"rower_group\".\"group_id\"=?", o.ID),
	)

	query := RowerGroups(queryMods...)
	queries.SetFrom(query.Query, "\"rower_group\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"rower_group\".*"})
	}

	return query
}

// GroupShells retrieves all the shell's Shells with an executor via group_id column.
func (o *Group) GroupShells(mods ...qm.QueryMod) shellQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shell\".\"group_id\"=?", o.ID),
	)

	query := Shells(queryMods...)
	queries.SetFrom(query.Query, "\"shell\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"shell\".*"})
	}

	return query
}

// LoadParent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupL) LoadParent(e boil.Executor, singular bool, maybeGroup interface{}, mods queries.Applicator) error {
	var slice []*Group
	var object *Group

	if singular {
		object = maybeGroup.(*Group)
	} else {
		slice = *maybeGroup.(*[]*Group)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupR{}
		}
		if !queries.IsNil(object.ParentID) {
			args = append(args, object.ParentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ParentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ParentID) {
				args = append(args, obj.ParentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Group`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Group")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Group")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Parent = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.ParentGroups = append(foreign.R.ParentGroups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentID, foreign.ID) {
				local.R.Parent = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.ParentGroups = append(foreign.R.ParentGroups, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupL) LoadOrganization(e boil.Executor, singular bool, maybeGroup interface{}, mods queries.Applicator) error {
	var slice []*Group
	var object *Group

	if singular {
		object = maybeGroup.(*Group)
	} else {
		slice = *maybeGroup.(*[]*Group)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupR{}
		}
		if !queries.IsNil(object.OrganizationID) {
			args = append(args, object.OrganizationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrganizationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrganizationID) {
				args = append(args, obj.OrganizationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`organization`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.Groups = append(foreign.R.Groups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrganizationID, foreign.ID) {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.Groups = append(foreign.R.Groups, local)
				break
			}
		}
	}

	return nil
}

// LoadParentGroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (groupL) LoadParentGroups(e boil.Executor, singular bool, maybeGroup interface{}, mods queries.Applicator) error {
	var slice []*Group
	var object *Group

	if singular {
		object = maybeGroup.(*Group)
	} else {
		slice = *maybeGroup.(*[]*Group)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Group`), qm.WhereIn(`parent_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Group")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Group")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentGroups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &groupR{}
			}
			foreign.R.Parent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ParentID) {
				local.R.ParentGroups = append(local.R.ParentGroups, foreign)
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.Parent = local
				break
			}
		}
	}

	return nil
}

// LoadGroupRowerGroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (groupL) LoadGroupRowerGroups(e boil.Executor, singular bool, maybeGroup interface{}, mods queries.Applicator) error {
	var slice []*Group
	var object *Group

	if singular {
		object = maybeGroup.(*Group)
	} else {
		slice = *maybeGroup.(*[]*Group)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`rower_group`), qm.WhereIn(`group_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load rower_group")
	}

	var resultSlice []*RowerGroup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice rower_group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on rower_group")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rower_group")
	}

	if len(rowerGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GroupRowerGroups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &rowerGroupR{}
			}
			foreign.R.Group = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.GroupID) {
				local.R.GroupRowerGroups = append(local.R.GroupRowerGroups, foreign)
				if foreign.R == nil {
					foreign.R = &rowerGroupR{}
				}
				foreign.R.Group = local
				break
			}
		}
	}

	return nil
}

// LoadGroupShells allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (groupL) LoadGroupShells(e boil.Executor, singular bool, maybeGroup interface{}, mods queries.Applicator) error {
	var slice []*Group
	var object *Group

	if singular {
		object = maybeGroup.(*Group)
	} else {
		slice = *maybeGroup.(*[]*Group)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`shell`), qm.WhereIn(`group_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shell")
	}

	var resultSlice []*Shell
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shell")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shell")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shell")
	}

	if len(shellAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GroupShells = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shellR{}
			}
			foreign.R.Group = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.GroupID) {
				local.R.GroupShells = append(local.R.GroupShells, foreign)
				if foreign.R == nil {
					foreign.R = &shellR{}
				}
				foreign.R.Group = local
				break
			}
		}
	}

	return nil
}

// SetParentG of the group to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentGroups.
// Uses the global database handle.
func (o *Group) SetParentG(insert bool, related *Group) error {
	return o.SetParent(boil.GetDB(), insert, related)
}

// SetParent of the group to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentGroups.
func (o *Group) SetParent(exec boil.Executor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Group\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
		strmangle.WhereClause("\"", "\"", 2, groupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentID, related.ID)
	if o.R == nil {
		o.R = &groupR{
			Parent: related,
		}
	} else {
		o.R.Parent = related
	}

	if related.R == nil {
		related.R = &groupR{
			ParentGroups: GroupSlice{o},
		}
	} else {
		related.R.ParentGroups = append(related.R.ParentGroups, o)
	}

	return nil
}

// RemoveParentG relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Group) RemoveParentG(related *Group) error {
	return o.RemoveParent(boil.GetDB(), related)
}

// RemoveParent relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Group) RemoveParent(exec boil.Executor, related *Group) error {
	var err error

	queries.SetScanner(&o.ParentID, nil)
	if _, err = o.Update(exec, boil.Whitelist("parent_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Parent = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentGroups {
		if queries.Equal(o.ParentID, ri.ParentID) {
			continue
		}

		ln := len(related.R.ParentGroups)
		if ln > 1 && i < ln-1 {
			related.R.ParentGroups[i] = related.R.ParentGroups[ln-1]
		}
		related.R.ParentGroups = related.R.ParentGroups[:ln-1]
		break
	}
	return nil
}

// SetOrganizationG of the group to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.Groups.
// Uses the global database handle.
func (o *Group) SetOrganizationG(insert bool, related *Organization) error {
	return o.SetOrganization(boil.GetDB(), insert, related)
}

// SetOrganization of the group to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.Groups.
func (o *Group) SetOrganization(exec boil.Executor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Group\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, groupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrganizationID, related.ID)
	if o.R == nil {
		o.R = &groupR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			Groups: GroupSlice{o},
		}
	} else {
		related.R.Groups = append(related.R.Groups, o)
	}

	return nil
}

// RemoveOrganizationG relationship.
// Sets o.R.Organization to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Group) RemoveOrganizationG(related *Organization) error {
	return o.RemoveOrganization(boil.GetDB(), related)
}

// RemoveOrganization relationship.
// Sets o.R.Organization to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Group) RemoveOrganization(exec boil.Executor, related *Organization) error {
	var err error

	queries.SetScanner(&o.OrganizationID, nil)
	if _, err = o.Update(exec, boil.Whitelist("organization_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Organization = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Groups {
		if queries.Equal(o.OrganizationID, ri.OrganizationID) {
			continue
		}

		ln := len(related.R.Groups)
		if ln > 1 && i < ln-1 {
			related.R.Groups[i] = related.R.Groups[ln-1]
		}
		related.R.Groups = related.R.Groups[:ln-1]
		break
	}
	return nil
}

// AddParentGroupsG adds the given related objects to the existing relationships
// of the Group, optionally inserting them as new records.
// Appends related to o.R.ParentGroups.
// Sets related.R.Parent appropriately.
// Uses the global database handle.
func (o *Group) AddParentGroupsG(insert bool, related ...*Group) error {
	return o.AddParentGroups(boil.GetDB(), insert, related...)
}

// AddParentGroups adds the given related objects to the existing relationships
// of the Group, optionally inserting them as new records.
// Appends related to o.R.ParentGroups.
// Sets related.R.Parent appropriately.
func (o *Group) AddParentGroups(exec boil.Executor, insert bool, related ...*Group) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Group\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
				strmangle.WhereClause("\"", "\"", 2, groupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &groupR{
			ParentGroups: related,
		}
	} else {
		o.R.ParentGroups = append(o.R.ParentGroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &groupR{
				Parent: o,
			}
		} else {
			rel.R.Parent = o
		}
	}
	return nil
}

// SetParentGroupsG removes all previously related items of the
// Group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentGroups accordingly.
// Replaces o.R.ParentGroups with related.
// Sets related.R.Parent's ParentGroups accordingly.
// Uses the global database handle.
func (o *Group) SetParentGroupsG(insert bool, related ...*Group) error {
	return o.SetParentGroups(boil.GetDB(), insert, related...)
}

// SetParentGroups removes all previously related items of the
// Group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentGroups accordingly.
// Replaces o.R.ParentGroups with related.
// Sets related.R.Parent's ParentGroups accordingly.
func (o *Group) SetParentGroups(exec boil.Executor, insert bool, related ...*Group) error {
	query := "update \"Group\" set \"parent_id\" = null where \"parent_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentGroups {
			queries.SetScanner(&rel.ParentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Parent = nil
		}

		o.R.ParentGroups = nil
	}
	return o.AddParentGroups(exec, insert, related...)
}

// RemoveParentGroupsG relationships from objects passed in.
// Removes related items from R.ParentGroups (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
// Uses the global database handle.
func (o *Group) RemoveParentGroupsG(related ...*Group) error {
	return o.RemoveParentGroups(boil.GetDB(), related...)
}

// RemoveParentGroups relationships from objects passed in.
// Removes related items from R.ParentGroups (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
func (o *Group) RemoveParentGroups(exec boil.Executor, related ...*Group) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentID, nil)
		if rel.R != nil {
			rel.R.Parent = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("parent_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentGroups {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentGroups)
			if ln > 1 && i < ln-1 {
				o.R.ParentGroups[i] = o.R.ParentGroups[ln-1]
			}
			o.R.ParentGroups = o.R.ParentGroups[:ln-1]
			break
		}
	}

	return nil
}

// AddGroupRowerGroupsG adds the given related objects to the existing relationships
// of the Group, optionally inserting them as new records.
// Appends related to o.R.GroupRowerGroups.
// Sets related.R.Group appropriately.
// Uses the global database handle.
func (o *Group) AddGroupRowerGroupsG(insert bool, related ...*RowerGroup) error {
	return o.AddGroupRowerGroups(boil.GetDB(), insert, related...)
}

// AddGroupRowerGroups adds the given related objects to the existing relationships
// of the Group, optionally inserting them as new records.
// Appends related to o.R.GroupRowerGroups.
// Sets related.R.Group appropriately.
func (o *Group) AddGroupRowerGroups(exec boil.Executor, insert bool, related ...*RowerGroup) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.GroupID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"rower_group\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"group_id"}),
				strmangle.WhereClause("\"", "\"", 2, rowerGroupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.GroupID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &groupR{
			GroupRowerGroups: related,
		}
	} else {
		o.R.GroupRowerGroups = append(o.R.GroupRowerGroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rowerGroupR{
				Group: o,
			}
		} else {
			rel.R.Group = o
		}
	}
	return nil
}

// SetGroupRowerGroupsG removes all previously related items of the
// Group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Group's GroupRowerGroups accordingly.
// Replaces o.R.GroupRowerGroups with related.
// Sets related.R.Group's GroupRowerGroups accordingly.
// Uses the global database handle.
func (o *Group) SetGroupRowerGroupsG(insert bool, related ...*RowerGroup) error {
	return o.SetGroupRowerGroups(boil.GetDB(), insert, related...)
}

// SetGroupRowerGroups removes all previously related items of the
// Group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Group's GroupRowerGroups accordingly.
// Replaces o.R.GroupRowerGroups with related.
// Sets related.R.Group's GroupRowerGroups accordingly.
func (o *Group) SetGroupRowerGroups(exec boil.Executor, insert bool, related ...*RowerGroup) error {
	query := "update \"rower_group\" set \"group_id\" = null where \"group_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.GroupRowerGroups {
			queries.SetScanner(&rel.GroupID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Group = nil
		}

		o.R.GroupRowerGroups = nil
	}
	return o.AddGroupRowerGroups(exec, insert, related...)
}

// RemoveGroupRowerGroupsG relationships from objects passed in.
// Removes related items from R.GroupRowerGroups (uses pointer comparison, removal does not keep order)
// Sets related.R.Group.
// Uses the global database handle.
func (o *Group) RemoveGroupRowerGroupsG(related ...*RowerGroup) error {
	return o.RemoveGroupRowerGroups(boil.GetDB(), related...)
}

// RemoveGroupRowerGroups relationships from objects passed in.
// Removes related items from R.GroupRowerGroups (uses pointer comparison, removal does not keep order)
// Sets related.R.Group.
func (o *Group) RemoveGroupRowerGroups(exec boil.Executor, related ...*RowerGroup) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.GroupID, nil)
		if rel.R != nil {
			rel.R.Group = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("group_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.GroupRowerGroups {
			if rel != ri {
				continue
			}

			ln := len(o.R.GroupRowerGroups)
			if ln > 1 && i < ln-1 {
				o.R.GroupRowerGroups[i] = o.R.GroupRowerGroups[ln-1]
			}
			o.R.GroupRowerGroups = o.R.GroupRowerGroups[:ln-1]
			break
		}
	}

	return nil
}

// AddGroupShellsG adds the given related objects to the existing relationships
// of the Group, optionally inserting them as new records.
// Appends related to o.R.GroupShells.
// Sets related.R.Group appropriately.
// Uses the global database handle.
func (o *Group) AddGroupShellsG(insert bool, related ...*Shell) error {
	return o.AddGroupShells(boil.GetDB(), insert, related...)
}

// AddGroupShells adds the given related objects to the existing relationships
// of the Group, optionally inserting them as new records.
// Appends related to o.R.GroupShells.
// Sets related.R.Group appropriately.
func (o *Group) AddGroupShells(exec boil.Executor, insert bool, related ...*Shell) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.GroupID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shell\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"group_id"}),
				strmangle.WhereClause("\"", "\"", 2, shellPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.GroupID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &groupR{
			GroupShells: related,
		}
	} else {
		o.R.GroupShells = append(o.R.GroupShells, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shellR{
				Group: o,
			}
		} else {
			rel.R.Group = o
		}
	}
	return nil
}

// SetGroupShellsG removes all previously related items of the
// Group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Group's GroupShells accordingly.
// Replaces o.R.GroupShells with related.
// Sets related.R.Group's GroupShells accordingly.
// Uses the global database handle.
func (o *Group) SetGroupShellsG(insert bool, related ...*Shell) error {
	return o.SetGroupShells(boil.GetDB(), insert, related...)
}

// SetGroupShells removes all previously related items of the
// Group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Group's GroupShells accordingly.
// Replaces o.R.GroupShells with related.
// Sets related.R.Group's GroupShells accordingly.
func (o *Group) SetGroupShells(exec boil.Executor, insert bool, related ...*Shell) error {
	query := "update \"shell\" set \"group_id\" = null where \"group_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.GroupShells {
			queries.SetScanner(&rel.GroupID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Group = nil
		}

		o.R.GroupShells = nil
	}
	return o.AddGroupShells(exec, insert, related...)
}

// RemoveGroupShellsG relationships from objects passed in.
// Removes related items from R.GroupShells (uses pointer comparison, removal does not keep order)
// Sets related.R.Group.
// Uses the global database handle.
func (o *Group) RemoveGroupShellsG(related ...*Shell) error {
	return o.RemoveGroupShells(boil.GetDB(), related...)
}

// RemoveGroupShells relationships from objects passed in.
// Removes related items from R.GroupShells (uses pointer comparison, removal does not keep order)
// Sets related.R.Group.
func (o *Group) RemoveGroupShells(exec boil.Executor, related ...*Shell) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.GroupID, nil)
		if rel.R != nil {
			rel.R.Group = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("group_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.GroupShells {
			if rel != ri {
				continue
			}

			ln := len(o.R.GroupShells)
			if ln > 1 && i < ln-1 {
				o.R.GroupShells[i] = o.R.GroupShells[ln-1]
			}
			o.R.GroupShells = o.R.GroupShells[:ln-1]
			break
		}
	}

	return nil
}

// Groups retrieves all the records using an executor.
func Groups(mods ...qm.QueryMod) groupQuery {
	mods = append(mods, qm.From("\"Group\""))
	return groupQuery{NewQuery(mods...)}
}

// FindGroupG retrieves a single record by ID.
func FindGroupG(iD int, selectCols ...string) (*Group, error) {
	return FindGroup(boil.GetDB(), iD, selectCols...)
}

// FindGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGroup(exec boil.Executor, iD int, selectCols ...string) (*Group, error) {
	groupObj := &Group{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Group\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, groupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Group")
	}

	return groupObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Group) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Group) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Group provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	groupInsertCacheMut.RLock()
	cache, cached := groupInsertCache[key]
	groupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			groupColumns,
			groupColumnsWithDefault,
			groupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(groupType, groupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(groupType, groupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Group\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Group\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Group")
	}

	if !cached {
		groupInsertCacheMut.Lock()
		groupInsertCache[key] = cache
		groupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Group record using the global executor.
// See Update for more documentation.
func (o *Group) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Group.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Group) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	groupUpdateCacheMut.RLock()
	cache, cached := groupUpdateCache[key]
	groupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			groupColumns,
			groupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Group, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Group\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, groupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(groupType, groupMapping, append(wl, groupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Group row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Group")
	}

	if !cached {
		groupUpdateCacheMut.Lock()
		groupUpdateCache[key] = cache
		groupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q groupQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q groupQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Group")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o GroupSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GroupSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Group\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, groupPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in group slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all group")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Group) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Group) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Group provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(groupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	groupUpsertCacheMut.RLock()
	cache, cached := groupUpsertCache[key]
	groupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			groupColumns,
			groupColumnsWithDefault,
			groupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			groupColumns,
			groupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert Group, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(groupPrimaryKeyColumns))
			copy(conflict, groupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"Group\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(groupType, groupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(groupType, groupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert Group")
	}

	if !cached {
		groupUpsertCacheMut.Lock()
		groupUpsertCache[key] = cache
		groupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Group record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Group) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Group record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Group) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Group provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), groupPrimaryKeyMapping)
	sql := "DELETE FROM \"Group\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Group")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q groupQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no groupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Group")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o GroupSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GroupSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Group slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(groupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Group\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groupPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from group slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Group")
	}

	if len(groupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Group) ReloadG() error {
	if o == nil {
		return errors.New("models: no Group provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Group) Reload(exec boil.Executor) error {
	ret, err := FindGroup(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroupSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty GroupSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroupSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Group\".* FROM \"Group\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, groupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GroupSlice")
	}

	*o = slice

	return nil
}

// GroupExistsG checks if the Group row exists.
func GroupExistsG(iD int) (bool, error) {
	return GroupExists(boil.GetDB(), iD)
}

// GroupExists checks if the Group row exists.
func GroupExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Group\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Group exists")
	}

	return exists, nil
}
