// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RowerGroup is an object representing the database table.
type RowerGroup struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	RowerID   null.Int  `boil:"rower_id" json:"rower_id,omitempty" toml:"rower_id" yaml:"rower_id,omitempty"`
	GroupID   null.Int  `boil:"group_id" json:"group_id,omitempty" toml:"group_id" yaml:"group_id,omitempty"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *rowerGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rowerGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RowerGroupColumns = struct {
	ID        string
	RowerID   string
	GroupID   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	RowerID:   "rower_id",
	GroupID:   "group_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

var RowerGroupWhere = struct {
	ID        whereHelperint
	RowerID   whereHelpernull_Int
	GroupID   whereHelpernull_Int
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: `id`},
	RowerID:   whereHelpernull_Int{field: `rower_id`},
	GroupID:   whereHelpernull_Int{field: `group_id`},
	CreatedAt: whereHelpernull_Time{field: `created_at`},
	UpdatedAt: whereHelpernull_Time{field: `updated_at`},
}

// RowerGroupRels is where relationship names are stored.
var RowerGroupRels = struct {
	Rower string
	Group string
}{
	Rower: "Rower",
	Group: "Group",
}

// rowerGroupR is where relationships are stored.
type rowerGroupR struct {
	Rower *Rower
	Group *Group
}

// NewStruct creates a new relationship struct
func (*rowerGroupR) NewStruct() *rowerGroupR {
	return &rowerGroupR{}
}

// rowerGroupL is where Load methods for each relationship are stored.
type rowerGroupL struct{}

var (
	rowerGroupColumns               = []string{"id", "rower_id", "group_id", "created_at", "updated_at"}
	rowerGroupColumnsWithoutDefault = []string{"rower_id", "group_id", "created_at", "updated_at"}
	rowerGroupColumnsWithDefault    = []string{"id"}
	rowerGroupPrimaryKeyColumns     = []string{"id"}
)

type (
	// RowerGroupSlice is an alias for a slice of pointers to RowerGroup.
	// This should generally be used opposed to []RowerGroup.
	RowerGroupSlice []*RowerGroup
	// RowerGroupHook is the signature for custom RowerGroup hook methods
	RowerGroupHook func(boil.Executor, *RowerGroup) error

	rowerGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rowerGroupType                 = reflect.TypeOf(&RowerGroup{})
	rowerGroupMapping              = queries.MakeStructMapping(rowerGroupType)
	rowerGroupPrimaryKeyMapping, _ = queries.BindMapping(rowerGroupType, rowerGroupMapping, rowerGroupPrimaryKeyColumns)
	rowerGroupInsertCacheMut       sync.RWMutex
	rowerGroupInsertCache          = make(map[string]insertCache)
	rowerGroupUpdateCacheMut       sync.RWMutex
	rowerGroupUpdateCache          = make(map[string]updateCache)
	rowerGroupUpsertCacheMut       sync.RWMutex
	rowerGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rowerGroupBeforeInsertHooks []RowerGroupHook
var rowerGroupBeforeUpdateHooks []RowerGroupHook
var rowerGroupBeforeDeleteHooks []RowerGroupHook
var rowerGroupBeforeUpsertHooks []RowerGroupHook

var rowerGroupAfterInsertHooks []RowerGroupHook
var rowerGroupAfterSelectHooks []RowerGroupHook
var rowerGroupAfterUpdateHooks []RowerGroupHook
var rowerGroupAfterDeleteHooks []RowerGroupHook
var rowerGroupAfterUpsertHooks []RowerGroupHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RowerGroup) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range rowerGroupBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RowerGroup) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range rowerGroupBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RowerGroup) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range rowerGroupBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RowerGroup) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range rowerGroupBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RowerGroup) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range rowerGroupAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RowerGroup) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range rowerGroupAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RowerGroup) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range rowerGroupAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RowerGroup) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range rowerGroupAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RowerGroup) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range rowerGroupAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRowerGroupHook registers your hook function for all future operations.
func AddRowerGroupHook(hookPoint boil.HookPoint, rowerGroupHook RowerGroupHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		rowerGroupBeforeInsertHooks = append(rowerGroupBeforeInsertHooks, rowerGroupHook)
	case boil.BeforeUpdateHook:
		rowerGroupBeforeUpdateHooks = append(rowerGroupBeforeUpdateHooks, rowerGroupHook)
	case boil.BeforeDeleteHook:
		rowerGroupBeforeDeleteHooks = append(rowerGroupBeforeDeleteHooks, rowerGroupHook)
	case boil.BeforeUpsertHook:
		rowerGroupBeforeUpsertHooks = append(rowerGroupBeforeUpsertHooks, rowerGroupHook)
	case boil.AfterInsertHook:
		rowerGroupAfterInsertHooks = append(rowerGroupAfterInsertHooks, rowerGroupHook)
	case boil.AfterSelectHook:
		rowerGroupAfterSelectHooks = append(rowerGroupAfterSelectHooks, rowerGroupHook)
	case boil.AfterUpdateHook:
		rowerGroupAfterUpdateHooks = append(rowerGroupAfterUpdateHooks, rowerGroupHook)
	case boil.AfterDeleteHook:
		rowerGroupAfterDeleteHooks = append(rowerGroupAfterDeleteHooks, rowerGroupHook)
	case boil.AfterUpsertHook:
		rowerGroupAfterUpsertHooks = append(rowerGroupAfterUpsertHooks, rowerGroupHook)
	}
}

// OneG returns a single rowerGroup record from the query using the global executor.
func (q rowerGroupQuery) OneG() (*RowerGroup, error) {
	return q.One(boil.GetDB())
}

// One returns a single rowerGroup record from the query.
func (q rowerGroupQuery) One(exec boil.Executor) (*RowerGroup, error) {
	o := &RowerGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for rower_group")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all RowerGroup records from the query using the global executor.
func (q rowerGroupQuery) AllG() (RowerGroupSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all RowerGroup records from the query.
func (q rowerGroupQuery) All(exec boil.Executor) (RowerGroupSlice, error) {
	var o []*RowerGroup

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RowerGroup slice")
	}

	if len(rowerGroupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all RowerGroup records in the query, and panics on error.
func (q rowerGroupQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all RowerGroup records in the query.
func (q rowerGroupQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count rower_group rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q rowerGroupQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q rowerGroupQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if rower_group exists")
	}

	return count > 0, nil
}

// Rower pointed to by the foreign key.
func (o *RowerGroup) Rower(mods ...qm.QueryMod) rowerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.RowerID),
	}

	queryMods = append(queryMods, mods...)

	query := Rowers(queryMods...)
	queries.SetFrom(query.Query, "\"rower\"")

	return query
}

// Group pointed to by the foreign key.
func (o *RowerGroup) Group(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.GroupID),
	}

	queryMods = append(queryMods, mods...)

	query := Groups(queryMods...)
	queries.SetFrom(query.Query, "\"Group\"")

	return query
}

// LoadRower allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (rowerGroupL) LoadRower(e boil.Executor, singular bool, maybeRowerGroup interface{}, mods queries.Applicator) error {
	var slice []*RowerGroup
	var object *RowerGroup

	if singular {
		object = maybeRowerGroup.(*RowerGroup)
	} else {
		slice = *maybeRowerGroup.(*[]*RowerGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rowerGroupR{}
		}
		if !queries.IsNil(object.RowerID) {
			args = append(args, object.RowerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rowerGroupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RowerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RowerID) {
				args = append(args, obj.RowerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`rower`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Rower")
	}

	var resultSlice []*Rower
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Rower")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for rower")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rower")
	}

	if len(rowerGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Rower = foreign
		if foreign.R == nil {
			foreign.R = &rowerR{}
		}
		foreign.R.RowerGroups = append(foreign.R.RowerGroups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RowerID, foreign.ID) {
				local.R.Rower = foreign
				if foreign.R == nil {
					foreign.R = &rowerR{}
				}
				foreign.R.RowerGroups = append(foreign.R.RowerGroups, local)
				break
			}
		}
	}

	return nil
}

// LoadGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (rowerGroupL) LoadGroup(e boil.Executor, singular bool, maybeRowerGroup interface{}, mods queries.Applicator) error {
	var slice []*RowerGroup
	var object *RowerGroup

	if singular {
		object = maybeRowerGroup.(*RowerGroup)
	} else {
		slice = *maybeRowerGroup.(*[]*RowerGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rowerGroupR{}
		}
		if !queries.IsNil(object.GroupID) {
			args = append(args, object.GroupID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rowerGroupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GroupID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.GroupID) {
				args = append(args, obj.GroupID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Group`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Group")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Group")
	}

	if len(rowerGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Group = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.GroupRowerGroups = append(foreign.R.GroupRowerGroups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GroupID, foreign.ID) {
				local.R.Group = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.GroupRowerGroups = append(foreign.R.GroupRowerGroups, local)
				break
			}
		}
	}

	return nil
}

// SetRowerG of the rowerGroup to the related item.
// Sets o.R.Rower to related.
// Adds o to related.R.RowerGroups.
// Uses the global database handle.
func (o *RowerGroup) SetRowerG(insert bool, related *Rower) error {
	return o.SetRower(boil.GetDB(), insert, related)
}

// SetRower of the rowerGroup to the related item.
// Sets o.R.Rower to related.
// Adds o to related.R.RowerGroups.
func (o *RowerGroup) SetRower(exec boil.Executor, insert bool, related *Rower) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rower_group\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"rower_id"}),
		strmangle.WhereClause("\"", "\"", 2, rowerGroupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RowerID, related.ID)
	if o.R == nil {
		o.R = &rowerGroupR{
			Rower: related,
		}
	} else {
		o.R.Rower = related
	}

	if related.R == nil {
		related.R = &rowerR{
			RowerGroups: RowerGroupSlice{o},
		}
	} else {
		related.R.RowerGroups = append(related.R.RowerGroups, o)
	}

	return nil
}

// RemoveRowerG relationship.
// Sets o.R.Rower to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *RowerGroup) RemoveRowerG(related *Rower) error {
	return o.RemoveRower(boil.GetDB(), related)
}

// RemoveRower relationship.
// Sets o.R.Rower to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *RowerGroup) RemoveRower(exec boil.Executor, related *Rower) error {
	var err error

	queries.SetScanner(&o.RowerID, nil)
	if _, err = o.Update(exec, boil.Whitelist("rower_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Rower = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RowerGroups {
		if queries.Equal(o.RowerID, ri.RowerID) {
			continue
		}

		ln := len(related.R.RowerGroups)
		if ln > 1 && i < ln-1 {
			related.R.RowerGroups[i] = related.R.RowerGroups[ln-1]
		}
		related.R.RowerGroups = related.R.RowerGroups[:ln-1]
		break
	}
	return nil
}

// SetGroupG of the rowerGroup to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupRowerGroups.
// Uses the global database handle.
func (o *RowerGroup) SetGroupG(insert bool, related *Group) error {
	return o.SetGroup(boil.GetDB(), insert, related)
}

// SetGroup of the rowerGroup to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupRowerGroups.
func (o *RowerGroup) SetGroup(exec boil.Executor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rower_group\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"group_id"}),
		strmangle.WhereClause("\"", "\"", 2, rowerGroupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GroupID, related.ID)
	if o.R == nil {
		o.R = &rowerGroupR{
			Group: related,
		}
	} else {
		o.R.Group = related
	}

	if related.R == nil {
		related.R = &groupR{
			GroupRowerGroups: RowerGroupSlice{o},
		}
	} else {
		related.R.GroupRowerGroups = append(related.R.GroupRowerGroups, o)
	}

	return nil
}

// RemoveGroupG relationship.
// Sets o.R.Group to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *RowerGroup) RemoveGroupG(related *Group) error {
	return o.RemoveGroup(boil.GetDB(), related)
}

// RemoveGroup relationship.
// Sets o.R.Group to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *RowerGroup) RemoveGroup(exec boil.Executor, related *Group) error {
	var err error

	queries.SetScanner(&o.GroupID, nil)
	if _, err = o.Update(exec, boil.Whitelist("group_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Group = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GroupRowerGroups {
		if queries.Equal(o.GroupID, ri.GroupID) {
			continue
		}

		ln := len(related.R.GroupRowerGroups)
		if ln > 1 && i < ln-1 {
			related.R.GroupRowerGroups[i] = related.R.GroupRowerGroups[ln-1]
		}
		related.R.GroupRowerGroups = related.R.GroupRowerGroups[:ln-1]
		break
	}
	return nil
}

// RowerGroups retrieves all the records using an executor.
func RowerGroups(mods ...qm.QueryMod) rowerGroupQuery {
	mods = append(mods, qm.From("\"rower_group\""))
	return rowerGroupQuery{NewQuery(mods...)}
}

// FindRowerGroupG retrieves a single record by ID.
func FindRowerGroupG(iD int, selectCols ...string) (*RowerGroup, error) {
	return FindRowerGroup(boil.GetDB(), iD, selectCols...)
}

// FindRowerGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRowerGroup(exec boil.Executor, iD int, selectCols ...string) (*RowerGroup, error) {
	rowerGroupObj := &RowerGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rower_group\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, rowerGroupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from rower_group")
	}

	return rowerGroupObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RowerGroup) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RowerGroup) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rower_group provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rowerGroupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rowerGroupInsertCacheMut.RLock()
	cache, cached := rowerGroupInsertCache[key]
	rowerGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rowerGroupColumns,
			rowerGroupColumnsWithDefault,
			rowerGroupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rowerGroupType, rowerGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rowerGroupType, rowerGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rower_group\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rower_group\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into rower_group")
	}

	if !cached {
		rowerGroupInsertCacheMut.Lock()
		rowerGroupInsertCache[key] = cache
		rowerGroupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single RowerGroup record using the global executor.
// See Update for more documentation.
func (o *RowerGroup) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the RowerGroup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RowerGroup) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rowerGroupUpdateCacheMut.RLock()
	cache, cached := rowerGroupUpdateCache[key]
	rowerGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rowerGroupColumns,
			rowerGroupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update rower_group, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rower_group\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, rowerGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rowerGroupType, rowerGroupMapping, append(wl, rowerGroupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update rower_group row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for rower_group")
	}

	if !cached {
		rowerGroupUpdateCacheMut.Lock()
		rowerGroupUpdateCache[key] = cache
		rowerGroupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q rowerGroupQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q rowerGroupQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for rower_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for rower_group")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RowerGroupSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RowerGroupSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rowerGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rower_group\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, rowerGroupPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in rowerGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all rowerGroup")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RowerGroup) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RowerGroup) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rower_group provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rowerGroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rowerGroupUpsertCacheMut.RLock()
	cache, cached := rowerGroupUpsertCache[key]
	rowerGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			rowerGroupColumns,
			rowerGroupColumnsWithDefault,
			rowerGroupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			rowerGroupColumns,
			rowerGroupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert rower_group, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(rowerGroupPrimaryKeyColumns))
			copy(conflict, rowerGroupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rower_group\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(rowerGroupType, rowerGroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rowerGroupType, rowerGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert rower_group")
	}

	if !cached {
		rowerGroupUpsertCacheMut.Lock()
		rowerGroupUpsertCache[key] = cache
		rowerGroupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single RowerGroup record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RowerGroup) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single RowerGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RowerGroup) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RowerGroup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rowerGroupPrimaryKeyMapping)
	sql := "DELETE FROM \"rower_group\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from rower_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for rower_group")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rowerGroupQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rowerGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rower_group")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rower_group")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RowerGroupSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RowerGroupSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RowerGroup slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(rowerGroupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rowerGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rower_group\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rowerGroupPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rowerGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rower_group")
	}

	if len(rowerGroupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RowerGroup) ReloadG() error {
	if o == nil {
		return errors.New("models: no RowerGroup provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RowerGroup) Reload(exec boil.Executor) error {
	ret, err := FindRowerGroup(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RowerGroupSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty RowerGroupSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RowerGroupSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RowerGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rowerGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rower_group\".* FROM \"rower_group\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rowerGroupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RowerGroupSlice")
	}

	*o = slice

	return nil
}

// RowerGroupExistsG checks if the RowerGroup row exists.
func RowerGroupExistsG(iD int) (bool, error) {
	return RowerGroupExists(boil.GetDB(), iD)
}

// RowerGroupExists checks if the RowerGroup row exists.
func RowerGroupExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rower_group\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if rower_group exists")
	}

	return exists, nil
}
