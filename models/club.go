// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Club is an object representing the database table.
type Club struct {
	ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name           null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Abbreviation   null.String `boil:"abbreviation" json:"abbreviation,omitempty" toml:"abbreviation" yaml:"abbreviation,omitempty"`
	OrganizationID null.Int    `boil:"organization_id" json:"organization_id,omitempty" toml:"organization_id" yaml:"organization_id,omitempty"`
	CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *clubR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clubL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClubColumns = struct {
	ID             string
	Name           string
	Abbreviation   string
	OrganizationID string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	Name:           "name",
	Abbreviation:   "abbreviation",
	OrganizationID: "organization_id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

// Generated where

var ClubWhere = struct {
	ID             whereHelperint
	Name           whereHelpernull_String
	Abbreviation   whereHelpernull_String
	OrganizationID whereHelpernull_Int
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	ID:             whereHelperint{field: `id`},
	Name:           whereHelpernull_String{field: `name`},
	Abbreviation:   whereHelpernull_String{field: `abbreviation`},
	OrganizationID: whereHelpernull_Int{field: `organization_id`},
	CreatedAt:      whereHelpertime_Time{field: `created_at`},
	UpdatedAt:      whereHelpertime_Time{field: `updated_at`},
}

// ClubRels is where relationship names are stored.
var ClubRels = struct {
	Organization string
	Groups       string
	Shells       string
}{
	Organization: "Organization",
	Groups:       "Groups",
	Shells:       "Shells",
}

// clubR is where relationships are stored.
type clubR struct {
	Organization *Organization
	Groups       GroupSlice
	Shells       ShellSlice
}

// NewStruct creates a new relationship struct
func (*clubR) NewStruct() *clubR {
	return &clubR{}
}

// clubL is where Load methods for each relationship are stored.
type clubL struct{}

var (
	clubColumns               = []string{"id", "name", "abbreviation", "organization_id", "created_at", "updated_at"}
	clubColumnsWithoutDefault = []string{"name", "abbreviation", "organization_id", "created_at", "updated_at"}
	clubColumnsWithDefault    = []string{"id"}
	clubPrimaryKeyColumns     = []string{"id"}
)

type (
	// ClubSlice is an alias for a slice of pointers to Club.
	// This should generally be used opposed to []Club.
	ClubSlice []*Club
	// ClubHook is the signature for custom Club hook methods
	ClubHook func(boil.Executor, *Club) error

	clubQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clubType                 = reflect.TypeOf(&Club{})
	clubMapping              = queries.MakeStructMapping(clubType)
	clubPrimaryKeyMapping, _ = queries.BindMapping(clubType, clubMapping, clubPrimaryKeyColumns)
	clubInsertCacheMut       sync.RWMutex
	clubInsertCache          = make(map[string]insertCache)
	clubUpdateCacheMut       sync.RWMutex
	clubUpdateCache          = make(map[string]updateCache)
	clubUpsertCacheMut       sync.RWMutex
	clubUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var clubBeforeInsertHooks []ClubHook
var clubBeforeUpdateHooks []ClubHook
var clubBeforeDeleteHooks []ClubHook
var clubBeforeUpsertHooks []ClubHook

var clubAfterInsertHooks []ClubHook
var clubAfterSelectHooks []ClubHook
var clubAfterUpdateHooks []ClubHook
var clubAfterDeleteHooks []ClubHook
var clubAfterUpsertHooks []ClubHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Club) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range clubBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Club) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range clubBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Club) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range clubBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Club) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range clubBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Club) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range clubAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Club) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range clubAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Club) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range clubAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Club) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range clubAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Club) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range clubAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClubHook registers your hook function for all future operations.
func AddClubHook(hookPoint boil.HookPoint, clubHook ClubHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		clubBeforeInsertHooks = append(clubBeforeInsertHooks, clubHook)
	case boil.BeforeUpdateHook:
		clubBeforeUpdateHooks = append(clubBeforeUpdateHooks, clubHook)
	case boil.BeforeDeleteHook:
		clubBeforeDeleteHooks = append(clubBeforeDeleteHooks, clubHook)
	case boil.BeforeUpsertHook:
		clubBeforeUpsertHooks = append(clubBeforeUpsertHooks, clubHook)
	case boil.AfterInsertHook:
		clubAfterInsertHooks = append(clubAfterInsertHooks, clubHook)
	case boil.AfterSelectHook:
		clubAfterSelectHooks = append(clubAfterSelectHooks, clubHook)
	case boil.AfterUpdateHook:
		clubAfterUpdateHooks = append(clubAfterUpdateHooks, clubHook)
	case boil.AfterDeleteHook:
		clubAfterDeleteHooks = append(clubAfterDeleteHooks, clubHook)
	case boil.AfterUpsertHook:
		clubAfterUpsertHooks = append(clubAfterUpsertHooks, clubHook)
	}
}

// OneG returns a single club record from the query using the global executor.
func (q clubQuery) OneG() (*Club, error) {
	return q.One(boil.GetDB())
}

// One returns a single club record from the query.
func (q clubQuery) One(exec boil.Executor) (*Club, error) {
	o := &Club{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for club")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Club records from the query using the global executor.
func (q clubQuery) AllG() (ClubSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Club records from the query.
func (q clubQuery) All(exec boil.Executor) (ClubSlice, error) {
	var o []*Club

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Club slice")
	}

	if len(clubAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Club records in the query, and panics on error.
func (q clubQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Club records in the query.
func (q clubQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count club rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q clubQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q clubQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if club exists")
	}

	return count > 0, nil
}

// Organization pointed to by the foreign key.
func (o *Club) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "\"organization\"")

	return query
}

// Groups retrieves all the Group's Groups with an executor.
func (o *Club) Groups(mods ...qm.QueryMod) groupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Group\".\"club_id\"=?", o.ID),
	)

	query := Groups(queryMods...)
	queries.SetFrom(query.Query, "\"Group\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"Group\".*"})
	}

	return query
}

// Shells retrieves all the shell's Shells with an executor.
func (o *Club) Shells(mods ...qm.QueryMod) shellQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shell\".\"club_id\"=?", o.ID),
	)

	query := Shells(queryMods...)
	queries.SetFrom(query.Query, "\"shell\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"shell\".*"})
	}

	return query
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (clubL) LoadOrganization(e boil.Executor, singular bool, maybeClub interface{}, mods queries.Applicator) error {
	var slice []*Club
	var object *Club

	if singular {
		object = maybeClub.(*Club)
	} else {
		slice = *maybeClub.(*[]*Club)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &clubR{}
		}
		if !queries.IsNil(object.OrganizationID) {
			args = append(args, object.OrganizationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clubR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrganizationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrganizationID) {
				args = append(args, obj.OrganizationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`organization`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization")
	}

	if len(clubAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.Clubs = append(foreign.R.Clubs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrganizationID, foreign.ID) {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.Clubs = append(foreign.R.Clubs, local)
				break
			}
		}
	}

	return nil
}

// LoadGroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (clubL) LoadGroups(e boil.Executor, singular bool, maybeClub interface{}, mods queries.Applicator) error {
	var slice []*Club
	var object *Club

	if singular {
		object = maybeClub.(*Club)
	} else {
		slice = *maybeClub.(*[]*Club)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &clubR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clubR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`Group`), qm.WhereIn(`club_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Group")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Group")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Groups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &groupR{}
			}
			foreign.R.Club = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ClubID) {
				local.R.Groups = append(local.R.Groups, foreign)
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.Club = local
				break
			}
		}
	}

	return nil
}

// LoadShells allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (clubL) LoadShells(e boil.Executor, singular bool, maybeClub interface{}, mods queries.Applicator) error {
	var slice []*Club
	var object *Club

	if singular {
		object = maybeClub.(*Club)
	} else {
		slice = *maybeClub.(*[]*Club)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &clubR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clubR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`shell`), qm.WhereIn(`club_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shell")
	}

	var resultSlice []*Shell
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shell")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shell")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shell")
	}

	if len(shellAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Shells = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shellR{}
			}
			foreign.R.Club = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ClubID) {
				local.R.Shells = append(local.R.Shells, foreign)
				if foreign.R == nil {
					foreign.R = &shellR{}
				}
				foreign.R.Club = local
				break
			}
		}
	}

	return nil
}

// SetOrganizationG of the club to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.Clubs.
// Uses the global database handle.
func (o *Club) SetOrganizationG(insert bool, related *Organization) error {
	return o.SetOrganization(boil.GetDB(), insert, related)
}

// SetOrganization of the club to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.Clubs.
func (o *Club) SetOrganization(exec boil.Executor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"club\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, clubPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrganizationID, related.ID)
	if o.R == nil {
		o.R = &clubR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			Clubs: ClubSlice{o},
		}
	} else {
		related.R.Clubs = append(related.R.Clubs, o)
	}

	return nil
}

// RemoveOrganizationG relationship.
// Sets o.R.Organization to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Club) RemoveOrganizationG(related *Organization) error {
	return o.RemoveOrganization(boil.GetDB(), related)
}

// RemoveOrganization relationship.
// Sets o.R.Organization to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Club) RemoveOrganization(exec boil.Executor, related *Organization) error {
	var err error

	queries.SetScanner(&o.OrganizationID, nil)
	if _, err = o.Update(exec, boil.Whitelist("organization_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Organization = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Clubs {
		if queries.Equal(o.OrganizationID, ri.OrganizationID) {
			continue
		}

		ln := len(related.R.Clubs)
		if ln > 1 && i < ln-1 {
			related.R.Clubs[i] = related.R.Clubs[ln-1]
		}
		related.R.Clubs = related.R.Clubs[:ln-1]
		break
	}
	return nil
}

// AddGroupsG adds the given related objects to the existing relationships
// of the club, optionally inserting them as new records.
// Appends related to o.R.Groups.
// Sets related.R.Club appropriately.
// Uses the global database handle.
func (o *Club) AddGroupsG(insert bool, related ...*Group) error {
	return o.AddGroups(boil.GetDB(), insert, related...)
}

// AddGroups adds the given related objects to the existing relationships
// of the club, optionally inserting them as new records.
// Appends related to o.R.Groups.
// Sets related.R.Club appropriately.
func (o *Club) AddGroups(exec boil.Executor, insert bool, related ...*Group) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ClubID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Group\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"club_id"}),
				strmangle.WhereClause("\"", "\"", 2, groupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ClubID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &clubR{
			Groups: related,
		}
	} else {
		o.R.Groups = append(o.R.Groups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &groupR{
				Club: o,
			}
		} else {
			rel.R.Club = o
		}
	}
	return nil
}

// SetGroupsG removes all previously related items of the
// club replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Club's Groups accordingly.
// Replaces o.R.Groups with related.
// Sets related.R.Club's Groups accordingly.
// Uses the global database handle.
func (o *Club) SetGroupsG(insert bool, related ...*Group) error {
	return o.SetGroups(boil.GetDB(), insert, related...)
}

// SetGroups removes all previously related items of the
// club replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Club's Groups accordingly.
// Replaces o.R.Groups with related.
// Sets related.R.Club's Groups accordingly.
func (o *Club) SetGroups(exec boil.Executor, insert bool, related ...*Group) error {
	query := "update \"Group\" set \"club_id\" = null where \"club_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Groups {
			queries.SetScanner(&rel.ClubID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Club = nil
		}

		o.R.Groups = nil
	}
	return o.AddGroups(exec, insert, related...)
}

// RemoveGroupsG relationships from objects passed in.
// Removes related items from R.Groups (uses pointer comparison, removal does not keep order)
// Sets related.R.Club.
// Uses the global database handle.
func (o *Club) RemoveGroupsG(related ...*Group) error {
	return o.RemoveGroups(boil.GetDB(), related...)
}

// RemoveGroups relationships from objects passed in.
// Removes related items from R.Groups (uses pointer comparison, removal does not keep order)
// Sets related.R.Club.
func (o *Club) RemoveGroups(exec boil.Executor, related ...*Group) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ClubID, nil)
		if rel.R != nil {
			rel.R.Club = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("club_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Groups {
			if rel != ri {
				continue
			}

			ln := len(o.R.Groups)
			if ln > 1 && i < ln-1 {
				o.R.Groups[i] = o.R.Groups[ln-1]
			}
			o.R.Groups = o.R.Groups[:ln-1]
			break
		}
	}

	return nil
}

// AddShellsG adds the given related objects to the existing relationships
// of the club, optionally inserting them as new records.
// Appends related to o.R.Shells.
// Sets related.R.Club appropriately.
// Uses the global database handle.
func (o *Club) AddShellsG(insert bool, related ...*Shell) error {
	return o.AddShells(boil.GetDB(), insert, related...)
}

// AddShells adds the given related objects to the existing relationships
// of the club, optionally inserting them as new records.
// Appends related to o.R.Shells.
// Sets related.R.Club appropriately.
func (o *Club) AddShells(exec boil.Executor, insert bool, related ...*Shell) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ClubID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shell\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"club_id"}),
				strmangle.WhereClause("\"", "\"", 2, shellPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ClubID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &clubR{
			Shells: related,
		}
	} else {
		o.R.Shells = append(o.R.Shells, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shellR{
				Club: o,
			}
		} else {
			rel.R.Club = o
		}
	}
	return nil
}

// SetShellsG removes all previously related items of the
// club replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Club's Shells accordingly.
// Replaces o.R.Shells with related.
// Sets related.R.Club's Shells accordingly.
// Uses the global database handle.
func (o *Club) SetShellsG(insert bool, related ...*Shell) error {
	return o.SetShells(boil.GetDB(), insert, related...)
}

// SetShells removes all previously related items of the
// club replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Club's Shells accordingly.
// Replaces o.R.Shells with related.
// Sets related.R.Club's Shells accordingly.
func (o *Club) SetShells(exec boil.Executor, insert bool, related ...*Shell) error {
	query := "update \"shell\" set \"club_id\" = null where \"club_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Shells {
			queries.SetScanner(&rel.ClubID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Club = nil
		}

		o.R.Shells = nil
	}
	return o.AddShells(exec, insert, related...)
}

// RemoveShellsG relationships from objects passed in.
// Removes related items from R.Shells (uses pointer comparison, removal does not keep order)
// Sets related.R.Club.
// Uses the global database handle.
func (o *Club) RemoveShellsG(related ...*Shell) error {
	return o.RemoveShells(boil.GetDB(), related...)
}

// RemoveShells relationships from objects passed in.
// Removes related items from R.Shells (uses pointer comparison, removal does not keep order)
// Sets related.R.Club.
func (o *Club) RemoveShells(exec boil.Executor, related ...*Shell) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ClubID, nil)
		if rel.R != nil {
			rel.R.Club = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("club_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Shells {
			if rel != ri {
				continue
			}

			ln := len(o.R.Shells)
			if ln > 1 && i < ln-1 {
				o.R.Shells[i] = o.R.Shells[ln-1]
			}
			o.R.Shells = o.R.Shells[:ln-1]
			break
		}
	}

	return nil
}

// Clubs retrieves all the records using an executor.
func Clubs(mods ...qm.QueryMod) clubQuery {
	mods = append(mods, qm.From("\"club\""))
	return clubQuery{NewQuery(mods...)}
}

// FindClubG retrieves a single record by ID.
func FindClubG(iD int, selectCols ...string) (*Club, error) {
	return FindClub(boil.GetDB(), iD, selectCols...)
}

// FindClub retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClub(exec boil.Executor, iD int, selectCols ...string) (*Club, error) {
	clubObj := &Club{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"club\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, clubObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from club")
	}

	return clubObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Club) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Club) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no club provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clubColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	clubInsertCacheMut.RLock()
	cache, cached := clubInsertCache[key]
	clubInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			clubColumns,
			clubColumnsWithDefault,
			clubColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(clubType, clubMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clubType, clubMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"club\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"club\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into club")
	}

	if !cached {
		clubInsertCacheMut.Lock()
		clubInsertCache[key] = cache
		clubInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Club record using the global executor.
// See Update for more documentation.
func (o *Club) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Club.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Club) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	clubUpdateCacheMut.RLock()
	cache, cached := clubUpdateCache[key]
	clubUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			clubColumns,
			clubPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update club, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"club\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, clubPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clubType, clubMapping, append(wl, clubPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update club row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for club")
	}

	if !cached {
		clubUpdateCacheMut.Lock()
		clubUpdateCache[key] = cache
		clubUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q clubQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q clubQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for club")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for club")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ClubSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClubSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clubPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"club\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, clubPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in club slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all club")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Club) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Club) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no club provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clubColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	clubUpsertCacheMut.RLock()
	cache, cached := clubUpsertCache[key]
	clubUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			clubColumns,
			clubColumnsWithDefault,
			clubColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			clubColumns,
			clubPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert club, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(clubPrimaryKeyColumns))
			copy(conflict, clubPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"club\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(clubType, clubMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(clubType, clubMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert club")
	}

	if !cached {
		clubUpsertCacheMut.Lock()
		clubUpsertCache[key] = cache
		clubUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Club record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Club) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Club record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Club) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Club provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clubPrimaryKeyMapping)
	sql := "DELETE FROM \"club\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from club")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for club")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q clubQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no clubQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from club")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for club")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ClubSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClubSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Club slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(clubBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clubPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"club\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, clubPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from club slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for club")
	}

	if len(clubAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Club) ReloadG() error {
	if o == nil {
		return errors.New("models: no Club provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Club) Reload(exec boil.Executor) error {
	ret, err := FindClub(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClubSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ClubSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClubSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClubSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clubPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"club\".* FROM \"club\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, clubPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ClubSlice")
	}

	*o = slice

	return nil
}

// ClubExistsG checks if the Club row exists.
func ClubExistsG(iD int) (bool, error) {
	return ClubExists(boil.GetDB(), iD)
}

// ClubExists checks if the Club row exists.
func ClubExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"club\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if club exists")
	}

	return exists, nil
}
