// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Shell is an object representing the database table.
type Shell struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Type      null.Int    `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	ClubID    null.Int    `boil:"club_id" json:"club_id,omitempty" toml:"club_id" yaml:"club_id,omitempty"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *shellR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shellL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShellColumns = struct {
	ID        string
	Name      string
	Type      string
	ClubID    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	Type:      "type",
	ClubID:    "club_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

var ShellWhere = struct {
	ID        whereHelperint
	Name      whereHelpernull_String
	Type      whereHelpernull_Int
	ClubID    whereHelpernull_Int
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: `id`},
	Name:      whereHelpernull_String{field: `name`},
	Type:      whereHelpernull_Int{field: `type`},
	ClubID:    whereHelpernull_Int{field: `club_id`},
	CreatedAt: whereHelpertime_Time{field: `created_at`},
	UpdatedAt: whereHelpertime_Time{field: `updated_at`},
}

// ShellRels is where relationship names are stored.
var ShellRels = struct {
	Club    string
	Rentals string
}{
	Club:    "Club",
	Rentals: "Rentals",
}

// shellR is where relationships are stored.
type shellR struct {
	Club    *Club
	Rentals RentalSlice
}

// NewStruct creates a new relationship struct
func (*shellR) NewStruct() *shellR {
	return &shellR{}
}

// shellL is where Load methods for each relationship are stored.
type shellL struct{}

var (
	shellColumns               = []string{"id", "name", "type", "club_id", "created_at", "updated_at"}
	shellColumnsWithoutDefault = []string{"name", "type", "club_id", "created_at", "updated_at"}
	shellColumnsWithDefault    = []string{"id"}
	shellPrimaryKeyColumns     = []string{"id"}
)

type (
	// ShellSlice is an alias for a slice of pointers to Shell.
	// This should generally be used opposed to []Shell.
	ShellSlice []*Shell
	// ShellHook is the signature for custom Shell hook methods
	ShellHook func(boil.Executor, *Shell) error

	shellQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shellType                 = reflect.TypeOf(&Shell{})
	shellMapping              = queries.MakeStructMapping(shellType)
	shellPrimaryKeyMapping, _ = queries.BindMapping(shellType, shellMapping, shellPrimaryKeyColumns)
	shellInsertCacheMut       sync.RWMutex
	shellInsertCache          = make(map[string]insertCache)
	shellUpdateCacheMut       sync.RWMutex
	shellUpdateCache          = make(map[string]updateCache)
	shellUpsertCacheMut       sync.RWMutex
	shellUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shellBeforeInsertHooks []ShellHook
var shellBeforeUpdateHooks []ShellHook
var shellBeforeDeleteHooks []ShellHook
var shellBeforeUpsertHooks []ShellHook

var shellAfterInsertHooks []ShellHook
var shellAfterSelectHooks []ShellHook
var shellAfterUpdateHooks []ShellHook
var shellAfterDeleteHooks []ShellHook
var shellAfterUpsertHooks []ShellHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Shell) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range shellBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Shell) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range shellBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Shell) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range shellBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Shell) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range shellBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Shell) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range shellAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Shell) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range shellAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Shell) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range shellAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Shell) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range shellAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Shell) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range shellAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShellHook registers your hook function for all future operations.
func AddShellHook(hookPoint boil.HookPoint, shellHook ShellHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		shellBeforeInsertHooks = append(shellBeforeInsertHooks, shellHook)
	case boil.BeforeUpdateHook:
		shellBeforeUpdateHooks = append(shellBeforeUpdateHooks, shellHook)
	case boil.BeforeDeleteHook:
		shellBeforeDeleteHooks = append(shellBeforeDeleteHooks, shellHook)
	case boil.BeforeUpsertHook:
		shellBeforeUpsertHooks = append(shellBeforeUpsertHooks, shellHook)
	case boil.AfterInsertHook:
		shellAfterInsertHooks = append(shellAfterInsertHooks, shellHook)
	case boil.AfterSelectHook:
		shellAfterSelectHooks = append(shellAfterSelectHooks, shellHook)
	case boil.AfterUpdateHook:
		shellAfterUpdateHooks = append(shellAfterUpdateHooks, shellHook)
	case boil.AfterDeleteHook:
		shellAfterDeleteHooks = append(shellAfterDeleteHooks, shellHook)
	case boil.AfterUpsertHook:
		shellAfterUpsertHooks = append(shellAfterUpsertHooks, shellHook)
	}
}

// OneG returns a single shell record from the query using the global executor.
func (q shellQuery) OneG() (*Shell, error) {
	return q.One(boil.GetDB())
}

// One returns a single shell record from the query.
func (q shellQuery) One(exec boil.Executor) (*Shell, error) {
	o := &Shell{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shell")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Shell records from the query using the global executor.
func (q shellQuery) AllG() (ShellSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Shell records from the query.
func (q shellQuery) All(exec boil.Executor) (ShellSlice, error) {
	var o []*Shell

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Shell slice")
	}

	if len(shellAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Shell records in the query, and panics on error.
func (q shellQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Shell records in the query.
func (q shellQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shell rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q shellQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q shellQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shell exists")
	}

	return count > 0, nil
}

// Club pointed to by the foreign key.
func (o *Shell) Club(mods ...qm.QueryMod) clubQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ClubID),
	}

	queryMods = append(queryMods, mods...)

	query := Clubs(queryMods...)
	queries.SetFrom(query.Query, "\"club\"")

	return query
}

// Rentals retrieves all the rental's Rentals with an executor.
func (o *Shell) Rentals(mods ...qm.QueryMod) rentalQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"rental\".\"shell_id\"=?", o.ID),
	)

	query := Rentals(queryMods...)
	queries.SetFrom(query.Query, "\"rental\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"rental\".*"})
	}

	return query
}

// LoadClub allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shellL) LoadClub(e boil.Executor, singular bool, maybeShell interface{}, mods queries.Applicator) error {
	var slice []*Shell
	var object *Shell

	if singular {
		object = maybeShell.(*Shell)
	} else {
		slice = *maybeShell.(*[]*Shell)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shellR{}
		}
		if !queries.IsNil(object.ClubID) {
			args = append(args, object.ClubID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shellR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ClubID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ClubID) {
				args = append(args, obj.ClubID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`club`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Club")
	}

	var resultSlice []*Club
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Club")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for club")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for club")
	}

	if len(shellAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Club = foreign
		if foreign.R == nil {
			foreign.R = &clubR{}
		}
		foreign.R.Shells = append(foreign.R.Shells, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ClubID, foreign.ID) {
				local.R.Club = foreign
				if foreign.R == nil {
					foreign.R = &clubR{}
				}
				foreign.R.Shells = append(foreign.R.Shells, local)
				break
			}
		}
	}

	return nil
}

// LoadRentals allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shellL) LoadRentals(e boil.Executor, singular bool, maybeShell interface{}, mods queries.Applicator) error {
	var slice []*Shell
	var object *Shell

	if singular {
		object = maybeShell.(*Shell)
	} else {
		slice = *maybeShell.(*[]*Shell)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shellR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shellR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`rental`), qm.WhereIn(`shell_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load rental")
	}

	var resultSlice []*Rental
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice rental")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on rental")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rental")
	}

	if len(rentalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Rentals = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &rentalR{}
			}
			foreign.R.Shell = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ShellID) {
				local.R.Rentals = append(local.R.Rentals, foreign)
				if foreign.R == nil {
					foreign.R = &rentalR{}
				}
				foreign.R.Shell = local
				break
			}
		}
	}

	return nil
}

// SetClubG of the shell to the related item.
// Sets o.R.Club to related.
// Adds o to related.R.Shells.
// Uses the global database handle.
func (o *Shell) SetClubG(insert bool, related *Club) error {
	return o.SetClub(boil.GetDB(), insert, related)
}

// SetClub of the shell to the related item.
// Sets o.R.Club to related.
// Adds o to related.R.Shells.
func (o *Shell) SetClub(exec boil.Executor, insert bool, related *Club) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shell\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"club_id"}),
		strmangle.WhereClause("\"", "\"", 2, shellPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ClubID, related.ID)
	if o.R == nil {
		o.R = &shellR{
			Club: related,
		}
	} else {
		o.R.Club = related
	}

	if related.R == nil {
		related.R = &clubR{
			Shells: ShellSlice{o},
		}
	} else {
		related.R.Shells = append(related.R.Shells, o)
	}

	return nil
}

// RemoveClubG relationship.
// Sets o.R.Club to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Shell) RemoveClubG(related *Club) error {
	return o.RemoveClub(boil.GetDB(), related)
}

// RemoveClub relationship.
// Sets o.R.Club to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Shell) RemoveClub(exec boil.Executor, related *Club) error {
	var err error

	queries.SetScanner(&o.ClubID, nil)
	if _, err = o.Update(exec, boil.Whitelist("club_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Club = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Shells {
		if queries.Equal(o.ClubID, ri.ClubID) {
			continue
		}

		ln := len(related.R.Shells)
		if ln > 1 && i < ln-1 {
			related.R.Shells[i] = related.R.Shells[ln-1]
		}
		related.R.Shells = related.R.Shells[:ln-1]
		break
	}
	return nil
}

// AddRentalsG adds the given related objects to the existing relationships
// of the shell, optionally inserting them as new records.
// Appends related to o.R.Rentals.
// Sets related.R.Shell appropriately.
// Uses the global database handle.
func (o *Shell) AddRentalsG(insert bool, related ...*Rental) error {
	return o.AddRentals(boil.GetDB(), insert, related...)
}

// AddRentals adds the given related objects to the existing relationships
// of the shell, optionally inserting them as new records.
// Appends related to o.R.Rentals.
// Sets related.R.Shell appropriately.
func (o *Shell) AddRentals(exec boil.Executor, insert bool, related ...*Rental) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ShellID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"rental\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shell_id"}),
				strmangle.WhereClause("\"", "\"", 2, rentalPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ShellID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &shellR{
			Rentals: related,
		}
	} else {
		o.R.Rentals = append(o.R.Rentals, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rentalR{
				Shell: o,
			}
		} else {
			rel.R.Shell = o
		}
	}
	return nil
}

// SetRentalsG removes all previously related items of the
// shell replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Shell's Rentals accordingly.
// Replaces o.R.Rentals with related.
// Sets related.R.Shell's Rentals accordingly.
// Uses the global database handle.
func (o *Shell) SetRentalsG(insert bool, related ...*Rental) error {
	return o.SetRentals(boil.GetDB(), insert, related...)
}

// SetRentals removes all previously related items of the
// shell replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Shell's Rentals accordingly.
// Replaces o.R.Rentals with related.
// Sets related.R.Shell's Rentals accordingly.
func (o *Shell) SetRentals(exec boil.Executor, insert bool, related ...*Rental) error {
	query := "update \"rental\" set \"shell_id\" = null where \"shell_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Rentals {
			queries.SetScanner(&rel.ShellID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Shell = nil
		}

		o.R.Rentals = nil
	}
	return o.AddRentals(exec, insert, related...)
}

// RemoveRentalsG relationships from objects passed in.
// Removes related items from R.Rentals (uses pointer comparison, removal does not keep order)
// Sets related.R.Shell.
// Uses the global database handle.
func (o *Shell) RemoveRentalsG(related ...*Rental) error {
	return o.RemoveRentals(boil.GetDB(), related...)
}

// RemoveRentals relationships from objects passed in.
// Removes related items from R.Rentals (uses pointer comparison, removal does not keep order)
// Sets related.R.Shell.
func (o *Shell) RemoveRentals(exec boil.Executor, related ...*Rental) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ShellID, nil)
		if rel.R != nil {
			rel.R.Shell = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("shell_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Rentals {
			if rel != ri {
				continue
			}

			ln := len(o.R.Rentals)
			if ln > 1 && i < ln-1 {
				o.R.Rentals[i] = o.R.Rentals[ln-1]
			}
			o.R.Rentals = o.R.Rentals[:ln-1]
			break
		}
	}

	return nil
}

// Shells retrieves all the records using an executor.
func Shells(mods ...qm.QueryMod) shellQuery {
	mods = append(mods, qm.From("\"shell\""))
	return shellQuery{NewQuery(mods...)}
}

// FindShellG retrieves a single record by ID.
func FindShellG(iD int, selectCols ...string) (*Shell, error) {
	return FindShell(boil.GetDB(), iD, selectCols...)
}

// FindShell retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShell(exec boil.Executor, iD int, selectCols ...string) (*Shell, error) {
	shellObj := &Shell{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shell\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, shellObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shell")
	}

	return shellObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Shell) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Shell) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shell provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shellColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shellInsertCacheMut.RLock()
	cache, cached := shellInsertCache[key]
	shellInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shellColumns,
			shellColumnsWithDefault,
			shellColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shellType, shellMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shellType, shellMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shell\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shell\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shell")
	}

	if !cached {
		shellInsertCacheMut.Lock()
		shellInsertCache[key] = cache
		shellInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Shell record using the global executor.
// See Update for more documentation.
func (o *Shell) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Shell.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Shell) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shellUpdateCacheMut.RLock()
	cache, cached := shellUpdateCache[key]
	shellUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shellColumns,
			shellPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shell, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shell\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shellPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shellType, shellMapping, append(wl, shellPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shell row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shell")
	}

	if !cached {
		shellUpdateCacheMut.Lock()
		shellUpdateCache[key] = cache
		shellUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q shellQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q shellQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shell")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shell")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ShellSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShellSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shellPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shell\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shellPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shell slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shell")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Shell) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Shell) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shell provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shellColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shellUpsertCacheMut.RLock()
	cache, cached := shellUpsertCache[key]
	shellUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shellColumns,
			shellColumnsWithDefault,
			shellColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			shellColumns,
			shellPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shell, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shellPrimaryKeyColumns))
			copy(conflict, shellPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shell\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shellType, shellMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shellType, shellMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shell")
	}

	if !cached {
		shellUpsertCacheMut.Lock()
		shellUpsertCache[key] = cache
		shellUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Shell record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Shell) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Shell record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Shell) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Shell provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shellPrimaryKeyMapping)
	sql := "DELETE FROM \"shell\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shell")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shell")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shellQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shellQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shell")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shell")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ShellSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShellSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Shell slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(shellBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shellPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shell\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shellPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shell slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shell")
	}

	if len(shellAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Shell) ReloadG() error {
	if o == nil {
		return errors.New("models: no Shell provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Shell) Reload(exec boil.Executor) error {
	ret, err := FindShell(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShellSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ShellSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShellSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShellSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shellPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shell\".* FROM \"shell\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shellPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShellSlice")
	}

	*o = slice

	return nil
}

// ShellExistsG checks if the Shell row exists.
func ShellExistsG(iD int) (bool, error) {
	return ShellExists(boil.GetDB(), iD)
}

// ShellExists checks if the Shell row exists.
func ShellExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shell\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shell exists")
	}

	return exists, nil
}
