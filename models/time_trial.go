// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TimeTrial is an object representing the database table.
type TimeTrial struct {
	ID           int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	Date         time.Time    `boil:"date" json:"date" toml:"date" yaml:"date"`
	StartTime    null.Time    `boil:"start_time" json:"start_time,omitempty" toml:"start_time" yaml:"start_time,omitempty"`
	EndTime      null.Time    `boil:"end_time" json:"end_time,omitempty" toml:"end_time" yaml:"end_time,omitempty"`
	TimingStatus null.Int     `boil:"timing_status" json:"timing_status,omitempty" toml:"timing_status" yaml:"timing_status,omitempty"`
	Timers       null.Int     `boil:"timers" json:"timers,omitempty" toml:"timers" yaml:"timers,omitempty"`
	Distance     null.Float64 `boil:"distance" json:"distance,omitempty" toml:"distance" yaml:"distance,omitempty"`
	CreatedAt    time.Time    `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time    `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *timeTrialR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L timeTrialL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TimeTrialColumns = struct {
	ID           string
	Date         string
	StartTime    string
	EndTime      string
	TimingStatus string
	Timers       string
	Distance     string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	Date:         "date",
	StartTime:    "start_time",
	EndTime:      "end_time",
	TimingStatus: "timing_status",
	Timers:       "timers",
	Distance:     "distance",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var TimeTrialWhere = struct {
	ID           whereHelperint
	Date         whereHelpertime_Time
	StartTime    whereHelpernull_Time
	EndTime      whereHelpernull_Time
	TimingStatus whereHelpernull_Int
	Timers       whereHelpernull_Int
	Distance     whereHelpernull_Float64
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	ID:           whereHelperint{field: `id`},
	Date:         whereHelpertime_Time{field: `date`},
	StartTime:    whereHelpernull_Time{field: `start_time`},
	EndTime:      whereHelpernull_Time{field: `end_time`},
	TimingStatus: whereHelpernull_Int{field: `timing_status`},
	Timers:       whereHelpernull_Int{field: `timers`},
	Distance:     whereHelpernull_Float64{field: `distance`},
	CreatedAt:    whereHelpertime_Time{field: `created_at`},
	UpdatedAt:    whereHelpertime_Time{field: `updated_at`},
}

// TimeTrialRels is where relationship names are stored.
var TimeTrialRels = struct {
	Boats string
}{
	Boats: "Boats",
}

// timeTrialR is where relationships are stored.
type timeTrialR struct {
	Boats BoatSlice
}

// NewStruct creates a new relationship struct
func (*timeTrialR) NewStruct() *timeTrialR {
	return &timeTrialR{}
}

// timeTrialL is where Load methods for each relationship are stored.
type timeTrialL struct{}

var (
	timeTrialColumns               = []string{"id", "date", "start_time", "end_time", "timing_status", "timers", "distance", "created_at", "updated_at"}
	timeTrialColumnsWithoutDefault = []string{"date", "start_time", "end_time", "timing_status", "timers", "distance", "created_at", "updated_at"}
	timeTrialColumnsWithDefault    = []string{"id"}
	timeTrialPrimaryKeyColumns     = []string{"id"}
)

type (
	// TimeTrialSlice is an alias for a slice of pointers to TimeTrial.
	// This should generally be used opposed to []TimeTrial.
	TimeTrialSlice []*TimeTrial
	// TimeTrialHook is the signature for custom TimeTrial hook methods
	TimeTrialHook func(boil.Executor, *TimeTrial) error

	timeTrialQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	timeTrialType                 = reflect.TypeOf(&TimeTrial{})
	timeTrialMapping              = queries.MakeStructMapping(timeTrialType)
	timeTrialPrimaryKeyMapping, _ = queries.BindMapping(timeTrialType, timeTrialMapping, timeTrialPrimaryKeyColumns)
	timeTrialInsertCacheMut       sync.RWMutex
	timeTrialInsertCache          = make(map[string]insertCache)
	timeTrialUpdateCacheMut       sync.RWMutex
	timeTrialUpdateCache          = make(map[string]updateCache)
	timeTrialUpsertCacheMut       sync.RWMutex
	timeTrialUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var timeTrialBeforeInsertHooks []TimeTrialHook
var timeTrialBeforeUpdateHooks []TimeTrialHook
var timeTrialBeforeDeleteHooks []TimeTrialHook
var timeTrialBeforeUpsertHooks []TimeTrialHook

var timeTrialAfterInsertHooks []TimeTrialHook
var timeTrialAfterSelectHooks []TimeTrialHook
var timeTrialAfterUpdateHooks []TimeTrialHook
var timeTrialAfterDeleteHooks []TimeTrialHook
var timeTrialAfterUpsertHooks []TimeTrialHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TimeTrial) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range timeTrialBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TimeTrial) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range timeTrialBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TimeTrial) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range timeTrialBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TimeTrial) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range timeTrialBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TimeTrial) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range timeTrialAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TimeTrial) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range timeTrialAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TimeTrial) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range timeTrialAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TimeTrial) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range timeTrialAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TimeTrial) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range timeTrialAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTimeTrialHook registers your hook function for all future operations.
func AddTimeTrialHook(hookPoint boil.HookPoint, timeTrialHook TimeTrialHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		timeTrialBeforeInsertHooks = append(timeTrialBeforeInsertHooks, timeTrialHook)
	case boil.BeforeUpdateHook:
		timeTrialBeforeUpdateHooks = append(timeTrialBeforeUpdateHooks, timeTrialHook)
	case boil.BeforeDeleteHook:
		timeTrialBeforeDeleteHooks = append(timeTrialBeforeDeleteHooks, timeTrialHook)
	case boil.BeforeUpsertHook:
		timeTrialBeforeUpsertHooks = append(timeTrialBeforeUpsertHooks, timeTrialHook)
	case boil.AfterInsertHook:
		timeTrialAfterInsertHooks = append(timeTrialAfterInsertHooks, timeTrialHook)
	case boil.AfterSelectHook:
		timeTrialAfterSelectHooks = append(timeTrialAfterSelectHooks, timeTrialHook)
	case boil.AfterUpdateHook:
		timeTrialAfterUpdateHooks = append(timeTrialAfterUpdateHooks, timeTrialHook)
	case boil.AfterDeleteHook:
		timeTrialAfterDeleteHooks = append(timeTrialAfterDeleteHooks, timeTrialHook)
	case boil.AfterUpsertHook:
		timeTrialAfterUpsertHooks = append(timeTrialAfterUpsertHooks, timeTrialHook)
	}
}

// OneG returns a single timeTrial record from the query using the global executor.
func (q timeTrialQuery) OneG() (*TimeTrial, error) {
	return q.One(boil.GetDB())
}

// One returns a single timeTrial record from the query.
func (q timeTrialQuery) One(exec boil.Executor) (*TimeTrial, error) {
	o := &TimeTrial{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for time_trial")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TimeTrial records from the query using the global executor.
func (q timeTrialQuery) AllG() (TimeTrialSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all TimeTrial records from the query.
func (q timeTrialQuery) All(exec boil.Executor) (TimeTrialSlice, error) {
	var o []*TimeTrial

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TimeTrial slice")
	}

	if len(timeTrialAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TimeTrial records in the query, and panics on error.
func (q timeTrialQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all TimeTrial records in the query.
func (q timeTrialQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count time_trial rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q timeTrialQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q timeTrialQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if time_trial exists")
	}

	return count > 0, nil
}

// Boats retrieves all the boat's Boats with an executor.
func (o *TimeTrial) Boats(mods ...qm.QueryMod) boatQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"boat\".\"time_trial_id\"=?", o.ID),
	)

	query := Boats(queryMods...)
	queries.SetFrom(query.Query, "\"boat\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"boat\".*"})
	}

	return query
}

// LoadBoats allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (timeTrialL) LoadBoats(e boil.Executor, singular bool, maybeTimeTrial interface{}, mods queries.Applicator) error {
	var slice []*TimeTrial
	var object *TimeTrial

	if singular {
		object = maybeTimeTrial.(*TimeTrial)
	} else {
		slice = *maybeTimeTrial.(*[]*TimeTrial)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &timeTrialR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &timeTrialR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`boat`), qm.WhereIn(`time_trial_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load boat")
	}

	var resultSlice []*Boat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice boat")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on boat")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for boat")
	}

	if len(boatAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Boats = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &boatR{}
			}
			foreign.R.TimeTrial = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TimeTrialID) {
				local.R.Boats = append(local.R.Boats, foreign)
				if foreign.R == nil {
					foreign.R = &boatR{}
				}
				foreign.R.TimeTrial = local
				break
			}
		}
	}

	return nil
}

// AddBoatsG adds the given related objects to the existing relationships
// of the time_trial, optionally inserting them as new records.
// Appends related to o.R.Boats.
// Sets related.R.TimeTrial appropriately.
// Uses the global database handle.
func (o *TimeTrial) AddBoatsG(insert bool, related ...*Boat) error {
	return o.AddBoats(boil.GetDB(), insert, related...)
}

// AddBoats adds the given related objects to the existing relationships
// of the time_trial, optionally inserting them as new records.
// Appends related to o.R.Boats.
// Sets related.R.TimeTrial appropriately.
func (o *TimeTrial) AddBoats(exec boil.Executor, insert bool, related ...*Boat) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TimeTrialID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"boat\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"time_trial_id"}),
				strmangle.WhereClause("\"", "\"", 2, boatPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TimeTrialID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &timeTrialR{
			Boats: related,
		}
	} else {
		o.R.Boats = append(o.R.Boats, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &boatR{
				TimeTrial: o,
			}
		} else {
			rel.R.TimeTrial = o
		}
	}
	return nil
}

// SetBoatsG removes all previously related items of the
// time_trial replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TimeTrial's Boats accordingly.
// Replaces o.R.Boats with related.
// Sets related.R.TimeTrial's Boats accordingly.
// Uses the global database handle.
func (o *TimeTrial) SetBoatsG(insert bool, related ...*Boat) error {
	return o.SetBoats(boil.GetDB(), insert, related...)
}

// SetBoats removes all previously related items of the
// time_trial replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TimeTrial's Boats accordingly.
// Replaces o.R.Boats with related.
// Sets related.R.TimeTrial's Boats accordingly.
func (o *TimeTrial) SetBoats(exec boil.Executor, insert bool, related ...*Boat) error {
	query := "update \"boat\" set \"time_trial_id\" = null where \"time_trial_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Boats {
			queries.SetScanner(&rel.TimeTrialID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TimeTrial = nil
		}

		o.R.Boats = nil
	}
	return o.AddBoats(exec, insert, related...)
}

// RemoveBoatsG relationships from objects passed in.
// Removes related items from R.Boats (uses pointer comparison, removal does not keep order)
// Sets related.R.TimeTrial.
// Uses the global database handle.
func (o *TimeTrial) RemoveBoatsG(related ...*Boat) error {
	return o.RemoveBoats(boil.GetDB(), related...)
}

// RemoveBoats relationships from objects passed in.
// Removes related items from R.Boats (uses pointer comparison, removal does not keep order)
// Sets related.R.TimeTrial.
func (o *TimeTrial) RemoveBoats(exec boil.Executor, related ...*Boat) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TimeTrialID, nil)
		if rel.R != nil {
			rel.R.TimeTrial = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("time_trial_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Boats {
			if rel != ri {
				continue
			}

			ln := len(o.R.Boats)
			if ln > 1 && i < ln-1 {
				o.R.Boats[i] = o.R.Boats[ln-1]
			}
			o.R.Boats = o.R.Boats[:ln-1]
			break
		}
	}

	return nil
}

// TimeTrials retrieves all the records using an executor.
func TimeTrials(mods ...qm.QueryMod) timeTrialQuery {
	mods = append(mods, qm.From("\"time_trial\""))
	return timeTrialQuery{NewQuery(mods...)}
}

// FindTimeTrialG retrieves a single record by ID.
func FindTimeTrialG(iD int, selectCols ...string) (*TimeTrial, error) {
	return FindTimeTrial(boil.GetDB(), iD, selectCols...)
}

// FindTimeTrial retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTimeTrial(exec boil.Executor, iD int, selectCols ...string) (*TimeTrial, error) {
	timeTrialObj := &TimeTrial{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"time_trial\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, timeTrialObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from time_trial")
	}

	return timeTrialObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TimeTrial) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TimeTrial) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no time_trial provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(timeTrialColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	timeTrialInsertCacheMut.RLock()
	cache, cached := timeTrialInsertCache[key]
	timeTrialInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			timeTrialColumns,
			timeTrialColumnsWithDefault,
			timeTrialColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(timeTrialType, timeTrialMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(timeTrialType, timeTrialMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"time_trial\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"time_trial\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into time_trial")
	}

	if !cached {
		timeTrialInsertCacheMut.Lock()
		timeTrialInsertCache[key] = cache
		timeTrialInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single TimeTrial record using the global executor.
// See Update for more documentation.
func (o *TimeTrial) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the TimeTrial.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TimeTrial) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	timeTrialUpdateCacheMut.RLock()
	cache, cached := timeTrialUpdateCache[key]
	timeTrialUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			timeTrialColumns,
			timeTrialPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update time_trial, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"time_trial\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, timeTrialPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(timeTrialType, timeTrialMapping, append(wl, timeTrialPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update time_trial row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for time_trial")
	}

	if !cached {
		timeTrialUpdateCacheMut.Lock()
		timeTrialUpdateCache[key] = cache
		timeTrialUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q timeTrialQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q timeTrialQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for time_trial")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for time_trial")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TimeTrialSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TimeTrialSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), timeTrialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"time_trial\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, timeTrialPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in timeTrial slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all timeTrial")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TimeTrial) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TimeTrial) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no time_trial provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(timeTrialColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	timeTrialUpsertCacheMut.RLock()
	cache, cached := timeTrialUpsertCache[key]
	timeTrialUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			timeTrialColumns,
			timeTrialColumnsWithDefault,
			timeTrialColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			timeTrialColumns,
			timeTrialPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert time_trial, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(timeTrialPrimaryKeyColumns))
			copy(conflict, timeTrialPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"time_trial\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(timeTrialType, timeTrialMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(timeTrialType, timeTrialMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert time_trial")
	}

	if !cached {
		timeTrialUpsertCacheMut.Lock()
		timeTrialUpsertCache[key] = cache
		timeTrialUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single TimeTrial record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TimeTrial) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single TimeTrial record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TimeTrial) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TimeTrial provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), timeTrialPrimaryKeyMapping)
	sql := "DELETE FROM \"time_trial\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from time_trial")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for time_trial")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q timeTrialQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no timeTrialQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from time_trial")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for time_trial")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TimeTrialSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TimeTrialSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TimeTrial slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(timeTrialBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), timeTrialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"time_trial\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, timeTrialPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from timeTrial slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for time_trial")
	}

	if len(timeTrialAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TimeTrial) ReloadG() error {
	if o == nil {
		return errors.New("models: no TimeTrial provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TimeTrial) Reload(exec boil.Executor) error {
	ret, err := FindTimeTrial(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TimeTrialSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty TimeTrialSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TimeTrialSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TimeTrialSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), timeTrialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"time_trial\".* FROM \"time_trial\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, timeTrialPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TimeTrialSlice")
	}

	*o = slice

	return nil
}

// TimeTrialExistsG checks if the TimeTrial row exists.
func TimeTrialExistsG(iD int) (bool, error) {
	return TimeTrialExists(boil.GetDB(), iD)
}

// TimeTrialExists checks if the TimeTrial row exists.
func TimeTrialExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"time_trial\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if time_trial exists")
	}

	return exists, nil
}
