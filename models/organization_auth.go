// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// OrganizationAuth is an object representing the database table.
type OrganizationAuth struct {
	ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrganizationID null.Int    `boil:"organization_id" json:"organization_id,omitempty" toml:"organization_id" yaml:"organization_id,omitempty"`
	Token          null.String `boil:"token" json:"token,omitempty" toml:"token" yaml:"token,omitempty"`
	Phrase         null.String `boil:"phrase" json:"phrase,omitempty" toml:"phrase" yaml:"phrase,omitempty"`
	CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *organizationAuthR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L organizationAuthL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganizationAuthColumns = struct {
	ID             string
	OrganizationID string
	Token          string
	Phrase         string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	OrganizationID: "organization_id",
	Token:          "token",
	Phrase:         "phrase",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

// Generated where

var OrganizationAuthWhere = struct {
	ID             whereHelperint
	OrganizationID whereHelpernull_Int
	Token          whereHelpernull_String
	Phrase         whereHelpernull_String
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	ID:             whereHelperint{field: `id`},
	OrganizationID: whereHelpernull_Int{field: `organization_id`},
	Token:          whereHelpernull_String{field: `token`},
	Phrase:         whereHelpernull_String{field: `phrase`},
	CreatedAt:      whereHelpertime_Time{field: `created_at`},
	UpdatedAt:      whereHelpertime_Time{field: `updated_at`},
}

// OrganizationAuthRels is where relationship names are stored.
var OrganizationAuthRels = struct {
	Organization string
}{
	Organization: "Organization",
}

// organizationAuthR is where relationships are stored.
type organizationAuthR struct {
	Organization *Organization
}

// NewStruct creates a new relationship struct
func (*organizationAuthR) NewStruct() *organizationAuthR {
	return &organizationAuthR{}
}

// organizationAuthL is where Load methods for each relationship are stored.
type organizationAuthL struct{}

var (
	organizationAuthColumns               = []string{"id", "organization_id", "token", "phrase", "created_at", "updated_at"}
	organizationAuthColumnsWithoutDefault = []string{"organization_id", "token", "phrase", "created_at", "updated_at"}
	organizationAuthColumnsWithDefault    = []string{"id"}
	organizationAuthPrimaryKeyColumns     = []string{"id"}
)

type (
	// OrganizationAuthSlice is an alias for a slice of pointers to OrganizationAuth.
	// This should generally be used opposed to []OrganizationAuth.
	OrganizationAuthSlice []*OrganizationAuth
	// OrganizationAuthHook is the signature for custom OrganizationAuth hook methods
	OrganizationAuthHook func(boil.Executor, *OrganizationAuth) error

	organizationAuthQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organizationAuthType                 = reflect.TypeOf(&OrganizationAuth{})
	organizationAuthMapping              = queries.MakeStructMapping(organizationAuthType)
	organizationAuthPrimaryKeyMapping, _ = queries.BindMapping(organizationAuthType, organizationAuthMapping, organizationAuthPrimaryKeyColumns)
	organizationAuthInsertCacheMut       sync.RWMutex
	organizationAuthInsertCache          = make(map[string]insertCache)
	organizationAuthUpdateCacheMut       sync.RWMutex
	organizationAuthUpdateCache          = make(map[string]updateCache)
	organizationAuthUpsertCacheMut       sync.RWMutex
	organizationAuthUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organizationAuthBeforeInsertHooks []OrganizationAuthHook
var organizationAuthBeforeUpdateHooks []OrganizationAuthHook
var organizationAuthBeforeDeleteHooks []OrganizationAuthHook
var organizationAuthBeforeUpsertHooks []OrganizationAuthHook

var organizationAuthAfterInsertHooks []OrganizationAuthHook
var organizationAuthAfterSelectHooks []OrganizationAuthHook
var organizationAuthAfterUpdateHooks []OrganizationAuthHook
var organizationAuthAfterDeleteHooks []OrganizationAuthHook
var organizationAuthAfterUpsertHooks []OrganizationAuthHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrganizationAuth) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range organizationAuthBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrganizationAuth) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range organizationAuthBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrganizationAuth) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range organizationAuthBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrganizationAuth) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range organizationAuthBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrganizationAuth) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range organizationAuthAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrganizationAuth) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range organizationAuthAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrganizationAuth) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range organizationAuthAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrganizationAuth) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range organizationAuthAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrganizationAuth) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range organizationAuthAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganizationAuthHook registers your hook function for all future operations.
func AddOrganizationAuthHook(hookPoint boil.HookPoint, organizationAuthHook OrganizationAuthHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		organizationAuthBeforeInsertHooks = append(organizationAuthBeforeInsertHooks, organizationAuthHook)
	case boil.BeforeUpdateHook:
		organizationAuthBeforeUpdateHooks = append(organizationAuthBeforeUpdateHooks, organizationAuthHook)
	case boil.BeforeDeleteHook:
		organizationAuthBeforeDeleteHooks = append(organizationAuthBeforeDeleteHooks, organizationAuthHook)
	case boil.BeforeUpsertHook:
		organizationAuthBeforeUpsertHooks = append(organizationAuthBeforeUpsertHooks, organizationAuthHook)
	case boil.AfterInsertHook:
		organizationAuthAfterInsertHooks = append(organizationAuthAfterInsertHooks, organizationAuthHook)
	case boil.AfterSelectHook:
		organizationAuthAfterSelectHooks = append(organizationAuthAfterSelectHooks, organizationAuthHook)
	case boil.AfterUpdateHook:
		organizationAuthAfterUpdateHooks = append(organizationAuthAfterUpdateHooks, organizationAuthHook)
	case boil.AfterDeleteHook:
		organizationAuthAfterDeleteHooks = append(organizationAuthAfterDeleteHooks, organizationAuthHook)
	case boil.AfterUpsertHook:
		organizationAuthAfterUpsertHooks = append(organizationAuthAfterUpsertHooks, organizationAuthHook)
	}
}

// OneG returns a single organizationAuth record from the query using the global executor.
func (q organizationAuthQuery) OneG() (*OrganizationAuth, error) {
	return q.One(boil.GetDB())
}

// One returns a single organizationAuth record from the query.
func (q organizationAuthQuery) One(exec boil.Executor) (*OrganizationAuth, error) {
	o := &OrganizationAuth{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for organization_auth")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all OrganizationAuth records from the query using the global executor.
func (q organizationAuthQuery) AllG() (OrganizationAuthSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all OrganizationAuth records from the query.
func (q organizationAuthQuery) All(exec boil.Executor) (OrganizationAuthSlice, error) {
	var o []*OrganizationAuth

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrganizationAuth slice")
	}

	if len(organizationAuthAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all OrganizationAuth records in the query, and panics on error.
func (q organizationAuthQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all OrganizationAuth records in the query.
func (q organizationAuthQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count organization_auth rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q organizationAuthQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q organizationAuthQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if organization_auth exists")
	}

	return count > 0, nil
}

// Organization pointed to by the foreign key.
func (o *OrganizationAuth) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "\"organization\"")

	return query
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationAuthL) LoadOrganization(e boil.Executor, singular bool, maybeOrganizationAuth interface{}, mods queries.Applicator) error {
	var slice []*OrganizationAuth
	var object *OrganizationAuth

	if singular {
		object = maybeOrganizationAuth.(*OrganizationAuth)
	} else {
		slice = *maybeOrganizationAuth.(*[]*OrganizationAuth)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationAuthR{}
		}
		if !queries.IsNil(object.OrganizationID) {
			args = append(args, object.OrganizationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationAuthR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrganizationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrganizationID) {
				args = append(args, obj.OrganizationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`organization`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization")
	}

	if len(organizationAuthAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.OrganizationAuths = append(foreign.R.OrganizationAuths, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrganizationID, foreign.ID) {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.OrganizationAuths = append(foreign.R.OrganizationAuths, local)
				break
			}
		}
	}

	return nil
}

// SetOrganizationG of the organizationAuth to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.OrganizationAuths.
// Uses the global database handle.
func (o *OrganizationAuth) SetOrganizationG(insert bool, related *Organization) error {
	return o.SetOrganization(boil.GetDB(), insert, related)
}

// SetOrganization of the organizationAuth to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.OrganizationAuths.
func (o *OrganizationAuth) SetOrganization(exec boil.Executor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organization_auth\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, organizationAuthPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrganizationID, related.ID)
	if o.R == nil {
		o.R = &organizationAuthR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			OrganizationAuths: OrganizationAuthSlice{o},
		}
	} else {
		related.R.OrganizationAuths = append(related.R.OrganizationAuths, o)
	}

	return nil
}

// RemoveOrganizationG relationship.
// Sets o.R.Organization to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *OrganizationAuth) RemoveOrganizationG(related *Organization) error {
	return o.RemoveOrganization(boil.GetDB(), related)
}

// RemoveOrganization relationship.
// Sets o.R.Organization to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *OrganizationAuth) RemoveOrganization(exec boil.Executor, related *Organization) error {
	var err error

	queries.SetScanner(&o.OrganizationID, nil)
	if _, err = o.Update(exec, boil.Whitelist("organization_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Organization = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrganizationAuths {
		if queries.Equal(o.OrganizationID, ri.OrganizationID) {
			continue
		}

		ln := len(related.R.OrganizationAuths)
		if ln > 1 && i < ln-1 {
			related.R.OrganizationAuths[i] = related.R.OrganizationAuths[ln-1]
		}
		related.R.OrganizationAuths = related.R.OrganizationAuths[:ln-1]
		break
	}
	return nil
}

// OrganizationAuths retrieves all the records using an executor.
func OrganizationAuths(mods ...qm.QueryMod) organizationAuthQuery {
	mods = append(mods, qm.From("\"organization_auth\""))
	return organizationAuthQuery{NewQuery(mods...)}
}

// FindOrganizationAuthG retrieves a single record by ID.
func FindOrganizationAuthG(iD int, selectCols ...string) (*OrganizationAuth, error) {
	return FindOrganizationAuth(boil.GetDB(), iD, selectCols...)
}

// FindOrganizationAuth retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganizationAuth(exec boil.Executor, iD int, selectCols ...string) (*OrganizationAuth, error) {
	organizationAuthObj := &OrganizationAuth{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"organization_auth\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, organizationAuthObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from organization_auth")
	}

	return organizationAuthObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *OrganizationAuth) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrganizationAuth) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organization_auth provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationAuthColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organizationAuthInsertCacheMut.RLock()
	cache, cached := organizationAuthInsertCache[key]
	organizationAuthInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organizationAuthColumns,
			organizationAuthColumnsWithDefault,
			organizationAuthColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organizationAuthType, organizationAuthMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organizationAuthType, organizationAuthMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"organization_auth\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"organization_auth\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into organization_auth")
	}

	if !cached {
		organizationAuthInsertCacheMut.Lock()
		organizationAuthInsertCache[key] = cache
		organizationAuthInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single OrganizationAuth record using the global executor.
// See Update for more documentation.
func (o *OrganizationAuth) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the OrganizationAuth.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrganizationAuth) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organizationAuthUpdateCacheMut.RLock()
	cache, cached := organizationAuthUpdateCache[key]
	organizationAuthUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organizationAuthColumns,
			organizationAuthPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update organization_auth, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"organization_auth\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, organizationAuthPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organizationAuthType, organizationAuthMapping, append(wl, organizationAuthPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update organization_auth row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for organization_auth")
	}

	if !cached {
		organizationAuthUpdateCacheMut.Lock()
		organizationAuthUpdateCache[key] = cache
		organizationAuthUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q organizationAuthQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q organizationAuthQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for organization_auth")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for organization_auth")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OrganizationAuthSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganizationAuthSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationAuthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"organization_auth\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, organizationAuthPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in organizationAuth slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all organizationAuth")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *OrganizationAuth) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrganizationAuth) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organization_auth provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationAuthColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organizationAuthUpsertCacheMut.RLock()
	cache, cached := organizationAuthUpsertCache[key]
	organizationAuthUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			organizationAuthColumns,
			organizationAuthColumnsWithDefault,
			organizationAuthColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			organizationAuthColumns,
			organizationAuthPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert organization_auth, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(organizationAuthPrimaryKeyColumns))
			copy(conflict, organizationAuthPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"organization_auth\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(organizationAuthType, organizationAuthMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organizationAuthType, organizationAuthMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert organization_auth")
	}

	if !cached {
		organizationAuthUpsertCacheMut.Lock()
		organizationAuthUpsertCache[key] = cache
		organizationAuthUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single OrganizationAuth record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *OrganizationAuth) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single OrganizationAuth record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrganizationAuth) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrganizationAuth provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organizationAuthPrimaryKeyMapping)
	sql := "DELETE FROM \"organization_auth\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from organization_auth")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for organization_auth")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q organizationAuthQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no organizationAuthQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organization_auth")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organization_auth")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OrganizationAuthSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganizationAuthSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrganizationAuth slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(organizationAuthBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationAuthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"organization_auth\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationAuthPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organizationAuth slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organization_auth")
	}

	if len(organizationAuthAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *OrganizationAuth) ReloadG() error {
	if o == nil {
		return errors.New("models: no OrganizationAuth provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrganizationAuth) Reload(exec boil.Executor) error {
	ret, err := FindOrganizationAuth(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganizationAuthSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty OrganizationAuthSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganizationAuthSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganizationAuthSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationAuthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"organization_auth\".* FROM \"organization_auth\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationAuthPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrganizationAuthSlice")
	}

	*o = slice

	return nil
}

// OrganizationAuthExistsG checks if the OrganizationAuth row exists.
func OrganizationAuthExistsG(iD int) (bool, error) {
	return OrganizationAuthExists(boil.GetDB(), iD)
}

// OrganizationAuthExists checks if the OrganizationAuth row exists.
func OrganizationAuthExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"organization_auth\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if organization_auth exists")
	}

	return exists, nil
}
