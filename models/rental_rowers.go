// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RentalRower is an object representing the database table.
type RentalRower struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	RentalID  null.Int  `boil:"rental_id" json:"rental_id,omitempty" toml:"rental_id" yaml:"rental_id,omitempty"`
	RowerID   null.Int  `boil:"rower_id" json:"rower_id,omitempty" toml:"rower_id" yaml:"rower_id,omitempty"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *rentalRowerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rentalRowerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RentalRowerColumns = struct {
	ID        string
	RentalID  string
	RowerID   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	RentalID:  "rental_id",
	RowerID:   "rower_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

var RentalRowerWhere = struct {
	ID        whereHelperint
	RentalID  whereHelpernull_Int
	RowerID   whereHelpernull_Int
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: `id`},
	RentalID:  whereHelpernull_Int{field: `rental_id`},
	RowerID:   whereHelpernull_Int{field: `rower_id`},
	CreatedAt: whereHelpertime_Time{field: `created_at`},
	UpdatedAt: whereHelpertime_Time{field: `updated_at`},
}

// RentalRowerRels is where relationship names are stored.
var RentalRowerRels = struct {
	Rental string
	Rower  string
}{
	Rental: "Rental",
	Rower:  "Rower",
}

// rentalRowerR is where relationships are stored.
type rentalRowerR struct {
	Rental *Rental
	Rower  *Rower
}

// NewStruct creates a new relationship struct
func (*rentalRowerR) NewStruct() *rentalRowerR {
	return &rentalRowerR{}
}

// rentalRowerL is where Load methods for each relationship are stored.
type rentalRowerL struct{}

var (
	rentalRowerColumns               = []string{"id", "rental_id", "rower_id", "created_at", "updated_at"}
	rentalRowerColumnsWithoutDefault = []string{"rental_id", "rower_id", "created_at", "updated_at"}
	rentalRowerColumnsWithDefault    = []string{"id"}
	rentalRowerPrimaryKeyColumns     = []string{"id"}
)

type (
	// RentalRowerSlice is an alias for a slice of pointers to RentalRower.
	// This should generally be used opposed to []RentalRower.
	RentalRowerSlice []*RentalRower
	// RentalRowerHook is the signature for custom RentalRower hook methods
	RentalRowerHook func(boil.Executor, *RentalRower) error

	rentalRowerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rentalRowerType                 = reflect.TypeOf(&RentalRower{})
	rentalRowerMapping              = queries.MakeStructMapping(rentalRowerType)
	rentalRowerPrimaryKeyMapping, _ = queries.BindMapping(rentalRowerType, rentalRowerMapping, rentalRowerPrimaryKeyColumns)
	rentalRowerInsertCacheMut       sync.RWMutex
	rentalRowerInsertCache          = make(map[string]insertCache)
	rentalRowerUpdateCacheMut       sync.RWMutex
	rentalRowerUpdateCache          = make(map[string]updateCache)
	rentalRowerUpsertCacheMut       sync.RWMutex
	rentalRowerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rentalRowerBeforeInsertHooks []RentalRowerHook
var rentalRowerBeforeUpdateHooks []RentalRowerHook
var rentalRowerBeforeDeleteHooks []RentalRowerHook
var rentalRowerBeforeUpsertHooks []RentalRowerHook

var rentalRowerAfterInsertHooks []RentalRowerHook
var rentalRowerAfterSelectHooks []RentalRowerHook
var rentalRowerAfterUpdateHooks []RentalRowerHook
var rentalRowerAfterDeleteHooks []RentalRowerHook
var rentalRowerAfterUpsertHooks []RentalRowerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RentalRower) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalRowerBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RentalRower) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalRowerBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RentalRower) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalRowerBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RentalRower) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalRowerBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RentalRower) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalRowerAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RentalRower) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalRowerAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RentalRower) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalRowerAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RentalRower) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalRowerAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RentalRower) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range rentalRowerAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRentalRowerHook registers your hook function for all future operations.
func AddRentalRowerHook(hookPoint boil.HookPoint, rentalRowerHook RentalRowerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		rentalRowerBeforeInsertHooks = append(rentalRowerBeforeInsertHooks, rentalRowerHook)
	case boil.BeforeUpdateHook:
		rentalRowerBeforeUpdateHooks = append(rentalRowerBeforeUpdateHooks, rentalRowerHook)
	case boil.BeforeDeleteHook:
		rentalRowerBeforeDeleteHooks = append(rentalRowerBeforeDeleteHooks, rentalRowerHook)
	case boil.BeforeUpsertHook:
		rentalRowerBeforeUpsertHooks = append(rentalRowerBeforeUpsertHooks, rentalRowerHook)
	case boil.AfterInsertHook:
		rentalRowerAfterInsertHooks = append(rentalRowerAfterInsertHooks, rentalRowerHook)
	case boil.AfterSelectHook:
		rentalRowerAfterSelectHooks = append(rentalRowerAfterSelectHooks, rentalRowerHook)
	case boil.AfterUpdateHook:
		rentalRowerAfterUpdateHooks = append(rentalRowerAfterUpdateHooks, rentalRowerHook)
	case boil.AfterDeleteHook:
		rentalRowerAfterDeleteHooks = append(rentalRowerAfterDeleteHooks, rentalRowerHook)
	case boil.AfterUpsertHook:
		rentalRowerAfterUpsertHooks = append(rentalRowerAfterUpsertHooks, rentalRowerHook)
	}
}

// OneG returns a single rentalRower record from the query using the global executor.
func (q rentalRowerQuery) OneG() (*RentalRower, error) {
	return q.One(boil.GetDB())
}

// One returns a single rentalRower record from the query.
func (q rentalRowerQuery) One(exec boil.Executor) (*RentalRower, error) {
	o := &RentalRower{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for rental_rowers")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all RentalRower records from the query using the global executor.
func (q rentalRowerQuery) AllG() (RentalRowerSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all RentalRower records from the query.
func (q rentalRowerQuery) All(exec boil.Executor) (RentalRowerSlice, error) {
	var o []*RentalRower

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RentalRower slice")
	}

	if len(rentalRowerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all RentalRower records in the query, and panics on error.
func (q rentalRowerQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all RentalRower records in the query.
func (q rentalRowerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count rental_rowers rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q rentalRowerQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q rentalRowerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if rental_rowers exists")
	}

	return count > 0, nil
}

// Rental pointed to by the foreign key.
func (o *RentalRower) Rental(mods ...qm.QueryMod) rentalQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.RentalID),
	}

	queryMods = append(queryMods, mods...)

	query := Rentals(queryMods...)
	queries.SetFrom(query.Query, "\"rental\"")

	return query
}

// Rower pointed to by the foreign key.
func (o *RentalRower) Rower(mods ...qm.QueryMod) rowerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.RowerID),
	}

	queryMods = append(queryMods, mods...)

	query := Rowers(queryMods...)
	queries.SetFrom(query.Query, "\"rower\"")

	return query
}

// LoadRental allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (rentalRowerL) LoadRental(e boil.Executor, singular bool, maybeRentalRower interface{}, mods queries.Applicator) error {
	var slice []*RentalRower
	var object *RentalRower

	if singular {
		object = maybeRentalRower.(*RentalRower)
	} else {
		slice = *maybeRentalRower.(*[]*RentalRower)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rentalRowerR{}
		}
		if !queries.IsNil(object.RentalID) {
			args = append(args, object.RentalID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rentalRowerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RentalID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RentalID) {
				args = append(args, obj.RentalID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`rental`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Rental")
	}

	var resultSlice []*Rental
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Rental")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for rental")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rental")
	}

	if len(rentalRowerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Rental = foreign
		if foreign.R == nil {
			foreign.R = &rentalR{}
		}
		foreign.R.RentalRowers = append(foreign.R.RentalRowers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RentalID, foreign.ID) {
				local.R.Rental = foreign
				if foreign.R == nil {
					foreign.R = &rentalR{}
				}
				foreign.R.RentalRowers = append(foreign.R.RentalRowers, local)
				break
			}
		}
	}

	return nil
}

// LoadRower allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (rentalRowerL) LoadRower(e boil.Executor, singular bool, maybeRentalRower interface{}, mods queries.Applicator) error {
	var slice []*RentalRower
	var object *RentalRower

	if singular {
		object = maybeRentalRower.(*RentalRower)
	} else {
		slice = *maybeRentalRower.(*[]*RentalRower)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rentalRowerR{}
		}
		if !queries.IsNil(object.RowerID) {
			args = append(args, object.RowerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rentalRowerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RowerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RowerID) {
				args = append(args, obj.RowerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`rower`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Rower")
	}

	var resultSlice []*Rower
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Rower")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for rower")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rower")
	}

	if len(rentalRowerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Rower = foreign
		if foreign.R == nil {
			foreign.R = &rowerR{}
		}
		foreign.R.RentalRowers = append(foreign.R.RentalRowers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RowerID, foreign.ID) {
				local.R.Rower = foreign
				if foreign.R == nil {
					foreign.R = &rowerR{}
				}
				foreign.R.RentalRowers = append(foreign.R.RentalRowers, local)
				break
			}
		}
	}

	return nil
}

// SetRentalG of the rentalRower to the related item.
// Sets o.R.Rental to related.
// Adds o to related.R.RentalRowers.
// Uses the global database handle.
func (o *RentalRower) SetRentalG(insert bool, related *Rental) error {
	return o.SetRental(boil.GetDB(), insert, related)
}

// SetRental of the rentalRower to the related item.
// Sets o.R.Rental to related.
// Adds o to related.R.RentalRowers.
func (o *RentalRower) SetRental(exec boil.Executor, insert bool, related *Rental) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rental_rowers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"rental_id"}),
		strmangle.WhereClause("\"", "\"", 2, rentalRowerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RentalID, related.ID)
	if o.R == nil {
		o.R = &rentalRowerR{
			Rental: related,
		}
	} else {
		o.R.Rental = related
	}

	if related.R == nil {
		related.R = &rentalR{
			RentalRowers: RentalRowerSlice{o},
		}
	} else {
		related.R.RentalRowers = append(related.R.RentalRowers, o)
	}

	return nil
}

// RemoveRentalG relationship.
// Sets o.R.Rental to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *RentalRower) RemoveRentalG(related *Rental) error {
	return o.RemoveRental(boil.GetDB(), related)
}

// RemoveRental relationship.
// Sets o.R.Rental to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *RentalRower) RemoveRental(exec boil.Executor, related *Rental) error {
	var err error

	queries.SetScanner(&o.RentalID, nil)
	if _, err = o.Update(exec, boil.Whitelist("rental_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Rental = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RentalRowers {
		if queries.Equal(o.RentalID, ri.RentalID) {
			continue
		}

		ln := len(related.R.RentalRowers)
		if ln > 1 && i < ln-1 {
			related.R.RentalRowers[i] = related.R.RentalRowers[ln-1]
		}
		related.R.RentalRowers = related.R.RentalRowers[:ln-1]
		break
	}
	return nil
}

// SetRowerG of the rentalRower to the related item.
// Sets o.R.Rower to related.
// Adds o to related.R.RentalRowers.
// Uses the global database handle.
func (o *RentalRower) SetRowerG(insert bool, related *Rower) error {
	return o.SetRower(boil.GetDB(), insert, related)
}

// SetRower of the rentalRower to the related item.
// Sets o.R.Rower to related.
// Adds o to related.R.RentalRowers.
func (o *RentalRower) SetRower(exec boil.Executor, insert bool, related *Rower) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rental_rowers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"rower_id"}),
		strmangle.WhereClause("\"", "\"", 2, rentalRowerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RowerID, related.ID)
	if o.R == nil {
		o.R = &rentalRowerR{
			Rower: related,
		}
	} else {
		o.R.Rower = related
	}

	if related.R == nil {
		related.R = &rowerR{
			RentalRowers: RentalRowerSlice{o},
		}
	} else {
		related.R.RentalRowers = append(related.R.RentalRowers, o)
	}

	return nil
}

// RemoveRowerG relationship.
// Sets o.R.Rower to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *RentalRower) RemoveRowerG(related *Rower) error {
	return o.RemoveRower(boil.GetDB(), related)
}

// RemoveRower relationship.
// Sets o.R.Rower to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *RentalRower) RemoveRower(exec boil.Executor, related *Rower) error {
	var err error

	queries.SetScanner(&o.RowerID, nil)
	if _, err = o.Update(exec, boil.Whitelist("rower_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Rower = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RentalRowers {
		if queries.Equal(o.RowerID, ri.RowerID) {
			continue
		}

		ln := len(related.R.RentalRowers)
		if ln > 1 && i < ln-1 {
			related.R.RentalRowers[i] = related.R.RentalRowers[ln-1]
		}
		related.R.RentalRowers = related.R.RentalRowers[:ln-1]
		break
	}
	return nil
}

// RentalRowers retrieves all the records using an executor.
func RentalRowers(mods ...qm.QueryMod) rentalRowerQuery {
	mods = append(mods, qm.From("\"rental_rowers\""))
	return rentalRowerQuery{NewQuery(mods...)}
}

// FindRentalRowerG retrieves a single record by ID.
func FindRentalRowerG(iD int, selectCols ...string) (*RentalRower, error) {
	return FindRentalRower(boil.GetDB(), iD, selectCols...)
}

// FindRentalRower retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRentalRower(exec boil.Executor, iD int, selectCols ...string) (*RentalRower, error) {
	rentalRowerObj := &RentalRower{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rental_rowers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, rentalRowerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from rental_rowers")
	}

	return rentalRowerObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RentalRower) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RentalRower) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rental_rowers provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rentalRowerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rentalRowerInsertCacheMut.RLock()
	cache, cached := rentalRowerInsertCache[key]
	rentalRowerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rentalRowerColumns,
			rentalRowerColumnsWithDefault,
			rentalRowerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rentalRowerType, rentalRowerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rentalRowerType, rentalRowerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rental_rowers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rental_rowers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into rental_rowers")
	}

	if !cached {
		rentalRowerInsertCacheMut.Lock()
		rentalRowerInsertCache[key] = cache
		rentalRowerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single RentalRower record using the global executor.
// See Update for more documentation.
func (o *RentalRower) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the RentalRower.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RentalRower) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rentalRowerUpdateCacheMut.RLock()
	cache, cached := rentalRowerUpdateCache[key]
	rentalRowerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rentalRowerColumns,
			rentalRowerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update rental_rowers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rental_rowers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, rentalRowerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rentalRowerType, rentalRowerMapping, append(wl, rentalRowerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update rental_rowers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for rental_rowers")
	}

	if !cached {
		rentalRowerUpdateCacheMut.Lock()
		rentalRowerUpdateCache[key] = cache
		rentalRowerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q rentalRowerQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q rentalRowerQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for rental_rowers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for rental_rowers")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RentalRowerSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RentalRowerSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rentalRowerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rental_rowers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, rentalRowerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in rentalRower slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all rentalRower")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RentalRower) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RentalRower) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rental_rowers provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rentalRowerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rentalRowerUpsertCacheMut.RLock()
	cache, cached := rentalRowerUpsertCache[key]
	rentalRowerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			rentalRowerColumns,
			rentalRowerColumnsWithDefault,
			rentalRowerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			rentalRowerColumns,
			rentalRowerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert rental_rowers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(rentalRowerPrimaryKeyColumns))
			copy(conflict, rentalRowerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rental_rowers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(rentalRowerType, rentalRowerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rentalRowerType, rentalRowerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert rental_rowers")
	}

	if !cached {
		rentalRowerUpsertCacheMut.Lock()
		rentalRowerUpsertCache[key] = cache
		rentalRowerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single RentalRower record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RentalRower) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single RentalRower record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RentalRower) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RentalRower provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rentalRowerPrimaryKeyMapping)
	sql := "DELETE FROM \"rental_rowers\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from rental_rowers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for rental_rowers")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rentalRowerQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rentalRowerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rental_rowers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rental_rowers")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RentalRowerSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RentalRowerSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RentalRower slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(rentalRowerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rentalRowerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rental_rowers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rentalRowerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rentalRower slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rental_rowers")
	}

	if len(rentalRowerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RentalRower) ReloadG() error {
	if o == nil {
		return errors.New("models: no RentalRower provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RentalRower) Reload(exec boil.Executor) error {
	ret, err := FindRentalRower(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RentalRowerSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty RentalRowerSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RentalRowerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RentalRowerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rentalRowerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rental_rowers\".* FROM \"rental_rowers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rentalRowerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RentalRowerSlice")
	}

	*o = slice

	return nil
}

// RentalRowerExistsG checks if the RentalRower row exists.
func RentalRowerExistsG(iD int) (bool, error) {
	return RentalRowerExists(boil.GetDB(), iD)
}

// RentalRowerExists checks if the RentalRower row exists.
func RentalRowerExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rental_rowers\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if rental_rowers exists")
	}

	return exists, nil
}
